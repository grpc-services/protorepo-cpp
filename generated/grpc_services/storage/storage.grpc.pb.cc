// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpc_services/storage/storage.proto

#include "grpc_services/storage/storage.pb.h"
#include "grpc_services/storage/storage.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc_services {
namespace storage {

static const char* StorageService_method_names[] = {
  "/grpc_services.storage.StorageService/GetDrive",
  "/grpc_services.storage.StorageService/GetDrives",
  "/grpc_services.storage.StorageService/GetItem",
  "/grpc_services.storage.StorageService/GetChildren",
  "/grpc_services.storage.StorageService/GetContent",
  "/grpc_services.storage.StorageService/GetContentStream",
  "/grpc_services.storage.StorageService/CreateDrive",
  "/grpc_services.storage.StorageService/CreateItem",
  "/grpc_services.storage.StorageService/PutContentStream",
  "/grpc_services.storage.StorageService/TruncateContent",
  "/grpc_services.storage.StorageService/UpdateDrive",
  "/grpc_services.storage.StorageService/UpdateItem",
  "/grpc_services.storage.StorageService/RemoveDrive",
  "/grpc_services.storage.StorageService/RemoveItem",
  "/grpc_services.storage.StorageService/WatchChanges",
};

std::unique_ptr< StorageService::Stub> StorageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StorageService::Stub> stub(new StorageService::Stub(channel, options));
  return stub;
}

StorageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetDrive_(StorageService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDrives_(StorageService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetItem_(StorageService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChildren_(StorageService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContent_(StorageService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContentStream_(StorageService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CreateDrive_(StorageService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateItem_(StorageService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutContentStream_(StorageService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_TruncateContent_(StorageService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDrive_(StorageService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateItem_(StorageService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveDrive_(StorageService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveItem_(StorageService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchChanges_(StorageService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status StorageService::Stub::GetDrive(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest& request, ::grpc_services::storage::GetDriveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_services::storage::GetDriveRequest, ::grpc_services::storage::GetDriveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDrive_, context, request, response);
}

void StorageService::Stub::async::GetDrive(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest* request, ::grpc_services::storage::GetDriveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_services::storage::GetDriveRequest, ::grpc_services::storage::GetDriveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDrive_, context, request, response, std::move(f));
}

void StorageService::Stub::async::GetDrive(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest* request, ::grpc_services::storage::GetDriveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDrive_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDriveResponse>* StorageService::Stub::PrepareAsyncGetDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_services::storage::GetDriveResponse, ::grpc_services::storage::GetDriveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDrive_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDriveResponse>* StorageService::Stub::AsyncGetDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDriveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageService::Stub::GetDrives(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest& request, ::grpc_services::storage::GetDrivesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_services::storage::GetDrivesRequest, ::grpc_services::storage::GetDrivesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDrives_, context, request, response);
}

void StorageService::Stub::async::GetDrives(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest* request, ::grpc_services::storage::GetDrivesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_services::storage::GetDrivesRequest, ::grpc_services::storage::GetDrivesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDrives_, context, request, response, std::move(f));
}

void StorageService::Stub::async::GetDrives(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest* request, ::grpc_services::storage::GetDrivesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDrives_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDrivesResponse>* StorageService::Stub::PrepareAsyncGetDrivesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_services::storage::GetDrivesResponse, ::grpc_services::storage::GetDrivesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDrives_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDrivesResponse>* StorageService::Stub::AsyncGetDrivesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDrivesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageService::Stub::GetItem(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest& request, ::grpc_services::storage::GetItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_services::storage::GetItemRequest, ::grpc_services::storage::GetItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetItem_, context, request, response);
}

void StorageService::Stub::async::GetItem(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest* request, ::grpc_services::storage::GetItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_services::storage::GetItemRequest, ::grpc_services::storage::GetItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetItem_, context, request, response, std::move(f));
}

void StorageService::Stub::async::GetItem(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest* request, ::grpc_services::storage::GetItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetItemResponse>* StorageService::Stub::PrepareAsyncGetItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_services::storage::GetItemResponse, ::grpc_services::storage::GetItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetItemResponse>* StorageService::Stub::AsyncGetItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageService::Stub::GetChildren(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest& request, ::grpc_services::storage::GetChildrenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_services::storage::GetChildrenRequest, ::grpc_services::storage::GetChildrenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChildren_, context, request, response);
}

void StorageService::Stub::async::GetChildren(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest* request, ::grpc_services::storage::GetChildrenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_services::storage::GetChildrenRequest, ::grpc_services::storage::GetChildrenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChildren_, context, request, response, std::move(f));
}

void StorageService::Stub::async::GetChildren(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest* request, ::grpc_services::storage::GetChildrenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChildren_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetChildrenResponse>* StorageService::Stub::PrepareAsyncGetChildrenRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_services::storage::GetChildrenResponse, ::grpc_services::storage::GetChildrenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChildren_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetChildrenResponse>* StorageService::Stub::AsyncGetChildrenRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChildrenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageService::Stub::GetContent(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest& request, ::grpc_services::storage::GetContentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_services::storage::GetContentRequest, ::grpc_services::storage::GetContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContent_, context, request, response);
}

void StorageService::Stub::async::GetContent(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest* request, ::grpc_services::storage::GetContentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_services::storage::GetContentRequest, ::grpc_services::storage::GetContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContent_, context, request, response, std::move(f));
}

void StorageService::Stub::async::GetContent(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest* request, ::grpc_services::storage::GetContentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetContentResponse>* StorageService::Stub::PrepareAsyncGetContentRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_services::storage::GetContentResponse, ::grpc_services::storage::GetContentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetContentResponse>* StorageService::Stub::AsyncGetContentRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::grpc_services::storage::GetContentStreamResponse>* StorageService::Stub::GetContentStreamRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::grpc_services::storage::GetContentStreamResponse>::Create(channel_.get(), rpcmethod_GetContentStream_, context, request);
}

void StorageService::Stub::async::GetContentStream(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest* request, ::grpc::ClientReadReactor< ::grpc_services::storage::GetContentStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::grpc_services::storage::GetContentStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetContentStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::grpc_services::storage::GetContentStreamResponse>* StorageService::Stub::AsyncGetContentStreamRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::grpc_services::storage::GetContentStreamResponse>::Create(channel_.get(), cq, rpcmethod_GetContentStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::grpc_services::storage::GetContentStreamResponse>* StorageService::Stub::PrepareAsyncGetContentStreamRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::grpc_services::storage::GetContentStreamResponse>::Create(channel_.get(), cq, rpcmethod_GetContentStream_, context, request, false, nullptr);
}

::grpc::Status StorageService::Stub::CreateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest& request, ::grpc_services::storage::CreateDriveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_services::storage::CreateDriveRequest, ::grpc_services::storage::CreateDriveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDrive_, context, request, response);
}

void StorageService::Stub::async::CreateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest* request, ::grpc_services::storage::CreateDriveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_services::storage::CreateDriveRequest, ::grpc_services::storage::CreateDriveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDrive_, context, request, response, std::move(f));
}

void StorageService::Stub::async::CreateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest* request, ::grpc_services::storage::CreateDriveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDrive_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateDriveResponse>* StorageService::Stub::PrepareAsyncCreateDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_services::storage::CreateDriveResponse, ::grpc_services::storage::CreateDriveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDrive_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateDriveResponse>* StorageService::Stub::AsyncCreateDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDriveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageService::Stub::CreateItem(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest& request, ::grpc_services::storage::CreateItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_services::storage::CreateItemRequest, ::grpc_services::storage::CreateItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateItem_, context, request, response);
}

void StorageService::Stub::async::CreateItem(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest* request, ::grpc_services::storage::CreateItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_services::storage::CreateItemRequest, ::grpc_services::storage::CreateItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateItem_, context, request, response, std::move(f));
}

void StorageService::Stub::async::CreateItem(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest* request, ::grpc_services::storage::CreateItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateItemResponse>* StorageService::Stub::PrepareAsyncCreateItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_services::storage::CreateItemResponse, ::grpc_services::storage::CreateItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateItemResponse>* StorageService::Stub::AsyncCreateItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::grpc_services::storage::PutContentStreamRequest>* StorageService::Stub::PutContentStreamRaw(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::grpc_services::storage::PutContentStreamRequest>::Create(channel_.get(), rpcmethod_PutContentStream_, context, response);
}

void StorageService::Stub::async::PutContentStream(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response, ::grpc::ClientWriteReactor< ::grpc_services::storage::PutContentStreamRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::grpc_services::storage::PutContentStreamRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_PutContentStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::grpc_services::storage::PutContentStreamRequest>* StorageService::Stub::AsyncPutContentStreamRaw(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::grpc_services::storage::PutContentStreamRequest>::Create(channel_.get(), cq, rpcmethod_PutContentStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::grpc_services::storage::PutContentStreamRequest>* StorageService::Stub::PrepareAsyncPutContentStreamRaw(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::grpc_services::storage::PutContentStreamRequest>::Create(channel_.get(), cq, rpcmethod_PutContentStream_, context, response, false, nullptr);
}

::grpc::Status StorageService::Stub::TruncateContent(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest& request, ::grpc_services::storage::TruncateContentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_services::storage::TruncateContentRequest, ::grpc_services::storage::TruncateContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TruncateContent_, context, request, response);
}

void StorageService::Stub::async::TruncateContent(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest* request, ::grpc_services::storage::TruncateContentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_services::storage::TruncateContentRequest, ::grpc_services::storage::TruncateContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TruncateContent_, context, request, response, std::move(f));
}

void StorageService::Stub::async::TruncateContent(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest* request, ::grpc_services::storage::TruncateContentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TruncateContent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::TruncateContentResponse>* StorageService::Stub::PrepareAsyncTruncateContentRaw(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_services::storage::TruncateContentResponse, ::grpc_services::storage::TruncateContentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TruncateContent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::TruncateContentResponse>* StorageService::Stub::AsyncTruncateContentRaw(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTruncateContentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageService::Stub::UpdateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest& request, ::grpc_services::storage::UpdateDriveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_services::storage::UpdateDriveRequest, ::grpc_services::storage::UpdateDriveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateDrive_, context, request, response);
}

void StorageService::Stub::async::UpdateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest* request, ::grpc_services::storage::UpdateDriveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_services::storage::UpdateDriveRequest, ::grpc_services::storage::UpdateDriveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDrive_, context, request, response, std::move(f));
}

void StorageService::Stub::async::UpdateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest* request, ::grpc_services::storage::UpdateDriveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDrive_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateDriveResponse>* StorageService::Stub::PrepareAsyncUpdateDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_services::storage::UpdateDriveResponse, ::grpc_services::storage::UpdateDriveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateDrive_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateDriveResponse>* StorageService::Stub::AsyncUpdateDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateDriveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageService::Stub::UpdateItem(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest& request, ::grpc_services::storage::UpdateItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_services::storage::UpdateItemRequest, ::grpc_services::storage::UpdateItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateItem_, context, request, response);
}

void StorageService::Stub::async::UpdateItem(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest* request, ::grpc_services::storage::UpdateItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_services::storage::UpdateItemRequest, ::grpc_services::storage::UpdateItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateItem_, context, request, response, std::move(f));
}

void StorageService::Stub::async::UpdateItem(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest* request, ::grpc_services::storage::UpdateItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateItemResponse>* StorageService::Stub::PrepareAsyncUpdateItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_services::storage::UpdateItemResponse, ::grpc_services::storage::UpdateItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateItemResponse>* StorageService::Stub::AsyncUpdateItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageService::Stub::RemoveDrive(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest& request, ::grpc_services::storage::RemoveDriveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_services::storage::RemoveDriveRequest, ::grpc_services::storage::RemoveDriveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveDrive_, context, request, response);
}

void StorageService::Stub::async::RemoveDrive(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest* request, ::grpc_services::storage::RemoveDriveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_services::storage::RemoveDriveRequest, ::grpc_services::storage::RemoveDriveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveDrive_, context, request, response, std::move(f));
}

void StorageService::Stub::async::RemoveDrive(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest* request, ::grpc_services::storage::RemoveDriveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveDrive_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveDriveResponse>* StorageService::Stub::PrepareAsyncRemoveDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_services::storage::RemoveDriveResponse, ::grpc_services::storage::RemoveDriveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveDrive_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveDriveResponse>* StorageService::Stub::AsyncRemoveDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveDriveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageService::Stub::RemoveItem(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest& request, ::grpc_services::storage::RemoveItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_services::storage::RemoveItemRequest, ::grpc_services::storage::RemoveItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveItem_, context, request, response);
}

void StorageService::Stub::async::RemoveItem(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest* request, ::grpc_services::storage::RemoveItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_services::storage::RemoveItemRequest, ::grpc_services::storage::RemoveItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveItem_, context, request, response, std::move(f));
}

void StorageService::Stub::async::RemoveItem(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest* request, ::grpc_services::storage::RemoveItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveItemResponse>* StorageService::Stub::PrepareAsyncRemoveItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_services::storage::RemoveItemResponse, ::grpc_services::storage::RemoveItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveItemResponse>* StorageService::Stub::AsyncRemoveItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::grpc_services::storage::WatchChangesResponse>* StorageService::Stub::WatchChangesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::grpc_services::storage::WatchChangesResponse>::Create(channel_.get(), rpcmethod_WatchChanges_, context, request);
}

void StorageService::Stub::async::WatchChanges(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest* request, ::grpc::ClientReadReactor< ::grpc_services::storage::WatchChangesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::grpc_services::storage::WatchChangesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchChanges_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::grpc_services::storage::WatchChangesResponse>* StorageService::Stub::AsyncWatchChangesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::grpc_services::storage::WatchChangesResponse>::Create(channel_.get(), cq, rpcmethod_WatchChanges_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::grpc_services::storage::WatchChangesResponse>* StorageService::Stub::PrepareAsyncWatchChangesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::grpc_services::storage::WatchChangesResponse>::Create(channel_.get(), cq, rpcmethod_WatchChanges_, context, request, false, nullptr);
}

StorageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::grpc_services::storage::GetDriveRequest, ::grpc_services::storage::GetDriveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_services::storage::GetDriveRequest* req,
             ::grpc_services::storage::GetDriveResponse* resp) {
               return service->GetDrive(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::grpc_services::storage::GetDrivesRequest, ::grpc_services::storage::GetDrivesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_services::storage::GetDrivesRequest* req,
             ::grpc_services::storage::GetDrivesResponse* resp) {
               return service->GetDrives(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::grpc_services::storage::GetItemRequest, ::grpc_services::storage::GetItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_services::storage::GetItemRequest* req,
             ::grpc_services::storage::GetItemResponse* resp) {
               return service->GetItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::grpc_services::storage::GetChildrenRequest, ::grpc_services::storage::GetChildrenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_services::storage::GetChildrenRequest* req,
             ::grpc_services::storage::GetChildrenResponse* resp) {
               return service->GetChildren(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::grpc_services::storage::GetContentRequest, ::grpc_services::storage::GetContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_services::storage::GetContentRequest* req,
             ::grpc_services::storage::GetContentResponse* resp) {
               return service->GetContent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StorageService::Service, ::grpc_services::storage::GetContentStreamRequest, ::grpc_services::storage::GetContentStreamResponse>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_services::storage::GetContentStreamRequest* req,
             ::grpc::ServerWriter<::grpc_services::storage::GetContentStreamResponse>* writer) {
               return service->GetContentStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::grpc_services::storage::CreateDriveRequest, ::grpc_services::storage::CreateDriveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_services::storage::CreateDriveRequest* req,
             ::grpc_services::storage::CreateDriveResponse* resp) {
               return service->CreateDrive(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::grpc_services::storage::CreateItemRequest, ::grpc_services::storage::CreateItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_services::storage::CreateItemRequest* req,
             ::grpc_services::storage::CreateItemResponse* resp) {
               return service->CreateItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[8],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< StorageService::Service, ::grpc_services::storage::PutContentStreamRequest, ::grpc_services::storage::PutContentStreamResponse>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::grpc_services::storage::PutContentStreamRequest>* reader,
             ::grpc_services::storage::PutContentStreamResponse* resp) {
               return service->PutContentStream(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::grpc_services::storage::TruncateContentRequest, ::grpc_services::storage::TruncateContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_services::storage::TruncateContentRequest* req,
             ::grpc_services::storage::TruncateContentResponse* resp) {
               return service->TruncateContent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::grpc_services::storage::UpdateDriveRequest, ::grpc_services::storage::UpdateDriveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_services::storage::UpdateDriveRequest* req,
             ::grpc_services::storage::UpdateDriveResponse* resp) {
               return service->UpdateDrive(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::grpc_services::storage::UpdateItemRequest, ::grpc_services::storage::UpdateItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_services::storage::UpdateItemRequest* req,
             ::grpc_services::storage::UpdateItemResponse* resp) {
               return service->UpdateItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::grpc_services::storage::RemoveDriveRequest, ::grpc_services::storage::RemoveDriveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_services::storage::RemoveDriveRequest* req,
             ::grpc_services::storage::RemoveDriveResponse* resp) {
               return service->RemoveDrive(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::grpc_services::storage::RemoveItemRequest, ::grpc_services::storage::RemoveItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_services::storage::RemoveItemRequest* req,
             ::grpc_services::storage::RemoveItemResponse* resp) {
               return service->RemoveItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[14],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StorageService::Service, ::grpc_services::storage::WatchChangesRequest, ::grpc_services::storage::WatchChangesResponse>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_services::storage::WatchChangesRequest* req,
             ::grpc::ServerWriter<::grpc_services::storage::WatchChangesResponse>* writer) {
               return service->WatchChanges(ctx, req, writer);
             }, this)));
}

StorageService::Service::~Service() {
}

::grpc::Status StorageService::Service::GetDrive(::grpc::ServerContext* context, const ::grpc_services::storage::GetDriveRequest* request, ::grpc_services::storage::GetDriveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::GetDrives(::grpc::ServerContext* context, const ::grpc_services::storage::GetDrivesRequest* request, ::grpc_services::storage::GetDrivesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::GetItem(::grpc::ServerContext* context, const ::grpc_services::storage::GetItemRequest* request, ::grpc_services::storage::GetItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::GetChildren(::grpc::ServerContext* context, const ::grpc_services::storage::GetChildrenRequest* request, ::grpc_services::storage::GetChildrenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::GetContent(::grpc::ServerContext* context, const ::grpc_services::storage::GetContentRequest* request, ::grpc_services::storage::GetContentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::GetContentStream(::grpc::ServerContext* context, const ::grpc_services::storage::GetContentStreamRequest* request, ::grpc::ServerWriter< ::grpc_services::storage::GetContentStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::CreateDrive(::grpc::ServerContext* context, const ::grpc_services::storage::CreateDriveRequest* request, ::grpc_services::storage::CreateDriveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::CreateItem(::grpc::ServerContext* context, const ::grpc_services::storage::CreateItemRequest* request, ::grpc_services::storage::CreateItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::PutContentStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::grpc_services::storage::PutContentStreamRequest>* reader, ::grpc_services::storage::PutContentStreamResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::TruncateContent(::grpc::ServerContext* context, const ::grpc_services::storage::TruncateContentRequest* request, ::grpc_services::storage::TruncateContentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::UpdateDrive(::grpc::ServerContext* context, const ::grpc_services::storage::UpdateDriveRequest* request, ::grpc_services::storage::UpdateDriveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::UpdateItem(::grpc::ServerContext* context, const ::grpc_services::storage::UpdateItemRequest* request, ::grpc_services::storage::UpdateItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::RemoveDrive(::grpc::ServerContext* context, const ::grpc_services::storage::RemoveDriveRequest* request, ::grpc_services::storage::RemoveDriveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::RemoveItem(::grpc::ServerContext* context, const ::grpc_services::storage::RemoveItemRequest* request, ::grpc_services::storage::RemoveItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::WatchChanges(::grpc::ServerContext* context, const ::grpc_services::storage::WatchChangesRequest* request, ::grpc::ServerWriter< ::grpc_services::storage::WatchChangesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc_services
}  // namespace storage

