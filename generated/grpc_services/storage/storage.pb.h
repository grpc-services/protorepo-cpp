// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc_services/storage/storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpc_5fservices_2fstorage_2fstorage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpc_5fservices_2fstorage_2fstorage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "grpc_services/storage/entities.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpc_5fservices_2fstorage_2fstorage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[30]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpc_5fservices_2fstorage_2fstorage_2eproto;
namespace grpc_services {
namespace storage {
class CreateDriveRequest;
struct CreateDriveRequestDefaultTypeInternal;
extern CreateDriveRequestDefaultTypeInternal _CreateDriveRequest_default_instance_;
class CreateDriveResponse;
struct CreateDriveResponseDefaultTypeInternal;
extern CreateDriveResponseDefaultTypeInternal _CreateDriveResponse_default_instance_;
class CreateItemRequest;
struct CreateItemRequestDefaultTypeInternal;
extern CreateItemRequestDefaultTypeInternal _CreateItemRequest_default_instance_;
class CreateItemResponse;
struct CreateItemResponseDefaultTypeInternal;
extern CreateItemResponseDefaultTypeInternal _CreateItemResponse_default_instance_;
class GetChildrenRequest;
struct GetChildrenRequestDefaultTypeInternal;
extern GetChildrenRequestDefaultTypeInternal _GetChildrenRequest_default_instance_;
class GetChildrenResponse;
struct GetChildrenResponseDefaultTypeInternal;
extern GetChildrenResponseDefaultTypeInternal _GetChildrenResponse_default_instance_;
class GetContentRequest;
struct GetContentRequestDefaultTypeInternal;
extern GetContentRequestDefaultTypeInternal _GetContentRequest_default_instance_;
class GetContentResponse;
struct GetContentResponseDefaultTypeInternal;
extern GetContentResponseDefaultTypeInternal _GetContentResponse_default_instance_;
class GetContentStreamRequest;
struct GetContentStreamRequestDefaultTypeInternal;
extern GetContentStreamRequestDefaultTypeInternal _GetContentStreamRequest_default_instance_;
class GetContentStreamResponse;
struct GetContentStreamResponseDefaultTypeInternal;
extern GetContentStreamResponseDefaultTypeInternal _GetContentStreamResponse_default_instance_;
class GetDriveRequest;
struct GetDriveRequestDefaultTypeInternal;
extern GetDriveRequestDefaultTypeInternal _GetDriveRequest_default_instance_;
class GetDriveResponse;
struct GetDriveResponseDefaultTypeInternal;
extern GetDriveResponseDefaultTypeInternal _GetDriveResponse_default_instance_;
class GetDrivesRequest;
struct GetDrivesRequestDefaultTypeInternal;
extern GetDrivesRequestDefaultTypeInternal _GetDrivesRequest_default_instance_;
class GetDrivesResponse;
struct GetDrivesResponseDefaultTypeInternal;
extern GetDrivesResponseDefaultTypeInternal _GetDrivesResponse_default_instance_;
class GetItemRequest;
struct GetItemRequestDefaultTypeInternal;
extern GetItemRequestDefaultTypeInternal _GetItemRequest_default_instance_;
class GetItemResponse;
struct GetItemResponseDefaultTypeInternal;
extern GetItemResponseDefaultTypeInternal _GetItemResponse_default_instance_;
class PutContentStreamRequest;
struct PutContentStreamRequestDefaultTypeInternal;
extern PutContentStreamRequestDefaultTypeInternal _PutContentStreamRequest_default_instance_;
class PutContentStreamResponse;
struct PutContentStreamResponseDefaultTypeInternal;
extern PutContentStreamResponseDefaultTypeInternal _PutContentStreamResponse_default_instance_;
class RemoveDriveRequest;
struct RemoveDriveRequestDefaultTypeInternal;
extern RemoveDriveRequestDefaultTypeInternal _RemoveDriveRequest_default_instance_;
class RemoveDriveResponse;
struct RemoveDriveResponseDefaultTypeInternal;
extern RemoveDriveResponseDefaultTypeInternal _RemoveDriveResponse_default_instance_;
class RemoveItemRequest;
struct RemoveItemRequestDefaultTypeInternal;
extern RemoveItemRequestDefaultTypeInternal _RemoveItemRequest_default_instance_;
class RemoveItemResponse;
struct RemoveItemResponseDefaultTypeInternal;
extern RemoveItemResponseDefaultTypeInternal _RemoveItemResponse_default_instance_;
class TruncateContentRequest;
struct TruncateContentRequestDefaultTypeInternal;
extern TruncateContentRequestDefaultTypeInternal _TruncateContentRequest_default_instance_;
class TruncateContentResponse;
struct TruncateContentResponseDefaultTypeInternal;
extern TruncateContentResponseDefaultTypeInternal _TruncateContentResponse_default_instance_;
class UpdateDriveRequest;
struct UpdateDriveRequestDefaultTypeInternal;
extern UpdateDriveRequestDefaultTypeInternal _UpdateDriveRequest_default_instance_;
class UpdateDriveResponse;
struct UpdateDriveResponseDefaultTypeInternal;
extern UpdateDriveResponseDefaultTypeInternal _UpdateDriveResponse_default_instance_;
class UpdateItemRequest;
struct UpdateItemRequestDefaultTypeInternal;
extern UpdateItemRequestDefaultTypeInternal _UpdateItemRequest_default_instance_;
class UpdateItemResponse;
struct UpdateItemResponseDefaultTypeInternal;
extern UpdateItemResponseDefaultTypeInternal _UpdateItemResponse_default_instance_;
class WatchChangesRequest;
struct WatchChangesRequestDefaultTypeInternal;
extern WatchChangesRequestDefaultTypeInternal _WatchChangesRequest_default_instance_;
class WatchChangesResponse;
struct WatchChangesResponseDefaultTypeInternal;
extern WatchChangesResponseDefaultTypeInternal _WatchChangesResponse_default_instance_;
}  // namespace storage
}  // namespace grpc_services
PROTOBUF_NAMESPACE_OPEN
template<> ::grpc_services::storage::CreateDriveRequest* Arena::CreateMaybeMessage<::grpc_services::storage::CreateDriveRequest>(Arena*);
template<> ::grpc_services::storage::CreateDriveResponse* Arena::CreateMaybeMessage<::grpc_services::storage::CreateDriveResponse>(Arena*);
template<> ::grpc_services::storage::CreateItemRequest* Arena::CreateMaybeMessage<::grpc_services::storage::CreateItemRequest>(Arena*);
template<> ::grpc_services::storage::CreateItemResponse* Arena::CreateMaybeMessage<::grpc_services::storage::CreateItemResponse>(Arena*);
template<> ::grpc_services::storage::GetChildrenRequest* Arena::CreateMaybeMessage<::grpc_services::storage::GetChildrenRequest>(Arena*);
template<> ::grpc_services::storage::GetChildrenResponse* Arena::CreateMaybeMessage<::grpc_services::storage::GetChildrenResponse>(Arena*);
template<> ::grpc_services::storage::GetContentRequest* Arena::CreateMaybeMessage<::grpc_services::storage::GetContentRequest>(Arena*);
template<> ::grpc_services::storage::GetContentResponse* Arena::CreateMaybeMessage<::grpc_services::storage::GetContentResponse>(Arena*);
template<> ::grpc_services::storage::GetContentStreamRequest* Arena::CreateMaybeMessage<::grpc_services::storage::GetContentStreamRequest>(Arena*);
template<> ::grpc_services::storage::GetContentStreamResponse* Arena::CreateMaybeMessage<::grpc_services::storage::GetContentStreamResponse>(Arena*);
template<> ::grpc_services::storage::GetDriveRequest* Arena::CreateMaybeMessage<::grpc_services::storage::GetDriveRequest>(Arena*);
template<> ::grpc_services::storage::GetDriveResponse* Arena::CreateMaybeMessage<::grpc_services::storage::GetDriveResponse>(Arena*);
template<> ::grpc_services::storage::GetDrivesRequest* Arena::CreateMaybeMessage<::grpc_services::storage::GetDrivesRequest>(Arena*);
template<> ::grpc_services::storage::GetDrivesResponse* Arena::CreateMaybeMessage<::grpc_services::storage::GetDrivesResponse>(Arena*);
template<> ::grpc_services::storage::GetItemRequest* Arena::CreateMaybeMessage<::grpc_services::storage::GetItemRequest>(Arena*);
template<> ::grpc_services::storage::GetItemResponse* Arena::CreateMaybeMessage<::grpc_services::storage::GetItemResponse>(Arena*);
template<> ::grpc_services::storage::PutContentStreamRequest* Arena::CreateMaybeMessage<::grpc_services::storage::PutContentStreamRequest>(Arena*);
template<> ::grpc_services::storage::PutContentStreamResponse* Arena::CreateMaybeMessage<::grpc_services::storage::PutContentStreamResponse>(Arena*);
template<> ::grpc_services::storage::RemoveDriveRequest* Arena::CreateMaybeMessage<::grpc_services::storage::RemoveDriveRequest>(Arena*);
template<> ::grpc_services::storage::RemoveDriveResponse* Arena::CreateMaybeMessage<::grpc_services::storage::RemoveDriveResponse>(Arena*);
template<> ::grpc_services::storage::RemoveItemRequest* Arena::CreateMaybeMessage<::grpc_services::storage::RemoveItemRequest>(Arena*);
template<> ::grpc_services::storage::RemoveItemResponse* Arena::CreateMaybeMessage<::grpc_services::storage::RemoveItemResponse>(Arena*);
template<> ::grpc_services::storage::TruncateContentRequest* Arena::CreateMaybeMessage<::grpc_services::storage::TruncateContentRequest>(Arena*);
template<> ::grpc_services::storage::TruncateContentResponse* Arena::CreateMaybeMessage<::grpc_services::storage::TruncateContentResponse>(Arena*);
template<> ::grpc_services::storage::UpdateDriveRequest* Arena::CreateMaybeMessage<::grpc_services::storage::UpdateDriveRequest>(Arena*);
template<> ::grpc_services::storage::UpdateDriveResponse* Arena::CreateMaybeMessage<::grpc_services::storage::UpdateDriveResponse>(Arena*);
template<> ::grpc_services::storage::UpdateItemRequest* Arena::CreateMaybeMessage<::grpc_services::storage::UpdateItemRequest>(Arena*);
template<> ::grpc_services::storage::UpdateItemResponse* Arena::CreateMaybeMessage<::grpc_services::storage::UpdateItemResponse>(Arena*);
template<> ::grpc_services::storage::WatchChangesRequest* Arena::CreateMaybeMessage<::grpc_services::storage::WatchChangesRequest>(Arena*);
template<> ::grpc_services::storage::WatchChangesResponse* Arena::CreateMaybeMessage<::grpc_services::storage::WatchChangesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc_services {
namespace storage {

// ===================================================================

class GetDriveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetDriveRequest) */ {
 public:
  inline GetDriveRequest() : GetDriveRequest(nullptr) {}
  ~GetDriveRequest() override;
  explicit constexpr GetDriveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDriveRequest(const GetDriveRequest& from);
  GetDriveRequest(GetDriveRequest&& from) noexcept
    : GetDriveRequest() {
    *this = ::std::move(from);
  }

  inline GetDriveRequest& operator=(const GetDriveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDriveRequest& operator=(GetDriveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDriveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDriveRequest* internal_default_instance() {
    return reinterpret_cast<const GetDriveRequest*>(
               &_GetDriveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetDriveRequest& a, GetDriveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDriveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDriveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDriveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDriveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDriveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDriveRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDriveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.GetDriveRequest";
  }
  protected:
  explicit GetDriveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveIdFieldNumber = 1,
  };
  // string drive_id = 1;
  void clear_drive_id();
  const std::string& drive_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_drive_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_drive_id();
  PROTOBUF_NODISCARD std::string* release_drive_id();
  void set_allocated_drive_id(std::string* drive_id);
  private:
  const std::string& _internal_drive_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_drive_id(const std::string& value);
  std::string* _internal_mutable_drive_id();
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetDriveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drive_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetDriveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetDriveResponse) */ {
 public:
  inline GetDriveResponse() : GetDriveResponse(nullptr) {}
  ~GetDriveResponse() override;
  explicit constexpr GetDriveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDriveResponse(const GetDriveResponse& from);
  GetDriveResponse(GetDriveResponse&& from) noexcept
    : GetDriveResponse() {
    *this = ::std::move(from);
  }

  inline GetDriveResponse& operator=(const GetDriveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDriveResponse& operator=(GetDriveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDriveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDriveResponse* internal_default_instance() {
    return reinterpret_cast<const GetDriveResponse*>(
               &_GetDriveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetDriveResponse& a, GetDriveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDriveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDriveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDriveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDriveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDriveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDriveResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDriveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.GetDriveResponse";
  }
  protected:
  explicit GetDriveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveFieldNumber = 1,
  };
  // .grpc_services.storage.Drive drive = 1;
  bool has_drive() const;
  private:
  bool _internal_has_drive() const;
  public:
  void clear_drive();
  const ::grpc_services::storage::Drive& drive() const;
  PROTOBUF_NODISCARD ::grpc_services::storage::Drive* release_drive();
  ::grpc_services::storage::Drive* mutable_drive();
  void set_allocated_drive(::grpc_services::storage::Drive* drive);
  private:
  const ::grpc_services::storage::Drive& _internal_drive() const;
  ::grpc_services::storage::Drive* _internal_mutable_drive();
  public:
  void unsafe_arena_set_allocated_drive(
      ::grpc_services::storage::Drive* drive);
  ::grpc_services::storage::Drive* unsafe_arena_release_drive();

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetDriveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_services::storage::Drive* drive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetDrivesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetDrivesRequest) */ {
 public:
  inline GetDrivesRequest() : GetDrivesRequest(nullptr) {}
  explicit constexpr GetDrivesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDrivesRequest(const GetDrivesRequest& from);
  GetDrivesRequest(GetDrivesRequest&& from) noexcept
    : GetDrivesRequest() {
    *this = ::std::move(from);
  }

  inline GetDrivesRequest& operator=(const GetDrivesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDrivesRequest& operator=(GetDrivesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDrivesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDrivesRequest* internal_default_instance() {
    return reinterpret_cast<const GetDrivesRequest*>(
               &_GetDrivesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetDrivesRequest& a, GetDrivesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDrivesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDrivesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDrivesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDrivesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetDrivesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetDrivesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.GetDrivesRequest";
  }
  protected:
  explicit GetDrivesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetDrivesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetDrivesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetDrivesResponse) */ {
 public:
  inline GetDrivesResponse() : GetDrivesResponse(nullptr) {}
  ~GetDrivesResponse() override;
  explicit constexpr GetDrivesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDrivesResponse(const GetDrivesResponse& from);
  GetDrivesResponse(GetDrivesResponse&& from) noexcept
    : GetDrivesResponse() {
    *this = ::std::move(from);
  }

  inline GetDrivesResponse& operator=(const GetDrivesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDrivesResponse& operator=(GetDrivesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDrivesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDrivesResponse* internal_default_instance() {
    return reinterpret_cast<const GetDrivesResponse*>(
               &_GetDrivesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetDrivesResponse& a, GetDrivesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDrivesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDrivesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDrivesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDrivesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDrivesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDrivesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDrivesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.GetDrivesResponse";
  }
  protected:
  explicit GetDrivesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrivesFieldNumber = 1,
  };
  // repeated .grpc_services.storage.Drive drives = 1;
  int drives_size() const;
  private:
  int _internal_drives_size() const;
  public:
  void clear_drives();
  ::grpc_services::storage::Drive* mutable_drives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_services::storage::Drive >*
      mutable_drives();
  private:
  const ::grpc_services::storage::Drive& _internal_drives(int index) const;
  ::grpc_services::storage::Drive* _internal_add_drives();
  public:
  const ::grpc_services::storage::Drive& drives(int index) const;
  ::grpc_services::storage::Drive* add_drives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_services::storage::Drive >&
      drives() const;

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetDrivesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_services::storage::Drive > drives_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetItemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetItemRequest) */ {
 public:
  inline GetItemRequest() : GetItemRequest(nullptr) {}
  ~GetItemRequest() override;
  explicit constexpr GetItemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetItemRequest(const GetItemRequest& from);
  GetItemRequest(GetItemRequest&& from) noexcept
    : GetItemRequest() {
    *this = ::std::move(from);
  }

  inline GetItemRequest& operator=(const GetItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetItemRequest& operator=(GetItemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetItemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetItemRequest* internal_default_instance() {
    return reinterpret_cast<const GetItemRequest*>(
               &_GetItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetItemRequest& a, GetItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetItemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetItemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetItemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetItemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetItemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.GetItemRequest";
  }
  protected:
  explicit GetItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
  };
  // string drive_id = 1;
  void clear_drive_id();
  const std::string& drive_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_drive_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_drive_id();
  PROTOBUF_NODISCARD std::string* release_drive_id();
  void set_allocated_drive_id(std::string* drive_id);
  private:
  const std::string& _internal_drive_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_drive_id(const std::string& value);
  std::string* _internal_mutable_drive_id();
  public:

  // string item_id = 2;
  void clear_item_id();
  const std::string& item_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_id();
  PROTOBUF_NODISCARD std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drive_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetItemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetItemResponse) */ {
 public:
  inline GetItemResponse() : GetItemResponse(nullptr) {}
  ~GetItemResponse() override;
  explicit constexpr GetItemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetItemResponse(const GetItemResponse& from);
  GetItemResponse(GetItemResponse&& from) noexcept
    : GetItemResponse() {
    *this = ::std::move(from);
  }

  inline GetItemResponse& operator=(const GetItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetItemResponse& operator=(GetItemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetItemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetItemResponse* internal_default_instance() {
    return reinterpret_cast<const GetItemResponse*>(
               &_GetItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetItemResponse& a, GetItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetItemResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetItemResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetItemResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetItemResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetItemResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.GetItemResponse";
  }
  protected:
  explicit GetItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .grpc_services.storage.Item item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::grpc_services::storage::Item& item() const;
  PROTOBUF_NODISCARD ::grpc_services::storage::Item* release_item();
  ::grpc_services::storage::Item* mutable_item();
  void set_allocated_item(::grpc_services::storage::Item* item);
  private:
  const ::grpc_services::storage::Item& _internal_item() const;
  ::grpc_services::storage::Item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::grpc_services::storage::Item* item);
  ::grpc_services::storage::Item* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_services::storage::Item* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetChildrenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetChildrenRequest) */ {
 public:
  inline GetChildrenRequest() : GetChildrenRequest(nullptr) {}
  ~GetChildrenRequest() override;
  explicit constexpr GetChildrenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChildrenRequest(const GetChildrenRequest& from);
  GetChildrenRequest(GetChildrenRequest&& from) noexcept
    : GetChildrenRequest() {
    *this = ::std::move(from);
  }

  inline GetChildrenRequest& operator=(const GetChildrenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChildrenRequest& operator=(GetChildrenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChildrenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChildrenRequest* internal_default_instance() {
    return reinterpret_cast<const GetChildrenRequest*>(
               &_GetChildrenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetChildrenRequest& a, GetChildrenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChildrenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChildrenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetChildrenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetChildrenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChildrenRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetChildrenRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChildrenRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.GetChildrenRequest";
  }
  protected:
  explicit GetChildrenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // string drive_id = 1;
  void clear_drive_id();
  const std::string& drive_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_drive_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_drive_id();
  PROTOBUF_NODISCARD std::string* release_drive_id();
  void set_allocated_drive_id(std::string* drive_id);
  private:
  const std::string& _internal_drive_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_drive_id(const std::string& value);
  std::string* _internal_mutable_drive_id();
  public:

  // string item_id = 2;
  void clear_item_id();
  const std::string& item_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_id();
  PROTOBUF_NODISCARD std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // uint64 offset = 3;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // uint64 count = 4;
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetChildrenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drive_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  uint64_t offset_;
  uint64_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetChildrenResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetChildrenResponse) */ {
 public:
  inline GetChildrenResponse() : GetChildrenResponse(nullptr) {}
  ~GetChildrenResponse() override;
  explicit constexpr GetChildrenResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChildrenResponse(const GetChildrenResponse& from);
  GetChildrenResponse(GetChildrenResponse&& from) noexcept
    : GetChildrenResponse() {
    *this = ::std::move(from);
  }

  inline GetChildrenResponse& operator=(const GetChildrenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChildrenResponse& operator=(GetChildrenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChildrenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChildrenResponse* internal_default_instance() {
    return reinterpret_cast<const GetChildrenResponse*>(
               &_GetChildrenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetChildrenResponse& a, GetChildrenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChildrenResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChildrenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetChildrenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetChildrenResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChildrenResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetChildrenResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChildrenResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.GetChildrenResponse";
  }
  protected:
  explicit GetChildrenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 3,
    kOffsetFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // repeated .grpc_services.storage.Item children = 3;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::grpc_services::storage::Item* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_services::storage::Item >*
      mutable_children();
  private:
  const ::grpc_services::storage::Item& _internal_children(int index) const;
  ::grpc_services::storage::Item* _internal_add_children();
  public:
  const ::grpc_services::storage::Item& children(int index) const;
  ::grpc_services::storage::Item* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_services::storage::Item >&
      children() const;

  // uint64 offset = 1;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // uint64 total = 2;
  void clear_total();
  uint64_t total() const;
  void set_total(uint64_t value);
  private:
  uint64_t _internal_total() const;
  void _internal_set_total(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetChildrenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_services::storage::Item > children_;
  uint64_t offset_;
  uint64_t total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetContentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetContentRequest) */ {
 public:
  inline GetContentRequest() : GetContentRequest(nullptr) {}
  ~GetContentRequest() override;
  explicit constexpr GetContentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetContentRequest(const GetContentRequest& from);
  GetContentRequest(GetContentRequest&& from) noexcept
    : GetContentRequest() {
    *this = ::std::move(from);
  }

  inline GetContentRequest& operator=(const GetContentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetContentRequest& operator=(GetContentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetContentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetContentRequest* internal_default_instance() {
    return reinterpret_cast<const GetContentRequest*>(
               &_GetContentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetContentRequest& a, GetContentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetContentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetContentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetContentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetContentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetContentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetContentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetContentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.GetContentRequest";
  }
  protected:
  explicit GetContentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // string drive_id = 1;
  void clear_drive_id();
  const std::string& drive_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_drive_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_drive_id();
  PROTOBUF_NODISCARD std::string* release_drive_id();
  void set_allocated_drive_id(std::string* drive_id);
  private:
  const std::string& _internal_drive_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_drive_id(const std::string& value);
  std::string* _internal_mutable_drive_id();
  public:

  // string item_id = 2;
  void clear_item_id();
  const std::string& item_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_id();
  PROTOBUF_NODISCARD std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // uint64 offset = 3;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // uint64 count = 4;
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetContentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drive_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  uint64_t offset_;
  uint64_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetContentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetContentResponse) */ {
 public:
  inline GetContentResponse() : GetContentResponse(nullptr) {}
  ~GetContentResponse() override;
  explicit constexpr GetContentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetContentResponse(const GetContentResponse& from);
  GetContentResponse(GetContentResponse&& from) noexcept
    : GetContentResponse() {
    *this = ::std::move(from);
  }

  inline GetContentResponse& operator=(const GetContentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetContentResponse& operator=(GetContentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetContentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetContentResponse* internal_default_instance() {
    return reinterpret_cast<const GetContentResponse*>(
               &_GetContentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetContentResponse& a, GetContentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetContentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetContentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetContentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetContentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetContentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetContentResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetContentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.GetContentResponse";
  }
  protected:
  explicit GetContentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 4,
    kOffsetFieldNumber = 1,
    kCountFieldNumber = 2,
    kTotalSizeFieldNumber = 3,
  };
  // bytes content = 4;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 offset = 1;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // uint64 count = 2;
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // uint64 total_size = 3;
  void clear_total_size();
  uint64_t total_size() const;
  void set_total_size(uint64_t value);
  private:
  uint64_t _internal_total_size() const;
  void _internal_set_total_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetContentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  uint64_t offset_;
  uint64_t count_;
  uint64_t total_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetContentStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetContentStreamRequest) */ {
 public:
  inline GetContentStreamRequest() : GetContentStreamRequest(nullptr) {}
  ~GetContentStreamRequest() override;
  explicit constexpr GetContentStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetContentStreamRequest(const GetContentStreamRequest& from);
  GetContentStreamRequest(GetContentStreamRequest&& from) noexcept
    : GetContentStreamRequest() {
    *this = ::std::move(from);
  }

  inline GetContentStreamRequest& operator=(const GetContentStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetContentStreamRequest& operator=(GetContentStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetContentStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetContentStreamRequest* internal_default_instance() {
    return reinterpret_cast<const GetContentStreamRequest*>(
               &_GetContentStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetContentStreamRequest& a, GetContentStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetContentStreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetContentStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetContentStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetContentStreamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetContentStreamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetContentStreamRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetContentStreamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.GetContentStreamRequest";
  }
  protected:
  explicit GetContentStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // string drive_id = 1;
  void clear_drive_id();
  const std::string& drive_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_drive_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_drive_id();
  PROTOBUF_NODISCARD std::string* release_drive_id();
  void set_allocated_drive_id(std::string* drive_id);
  private:
  const std::string& _internal_drive_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_drive_id(const std::string& value);
  std::string* _internal_mutable_drive_id();
  public:

  // string item_id = 2;
  void clear_item_id();
  const std::string& item_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_id();
  PROTOBUF_NODISCARD std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // uint64 offset = 3;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // uint64 count = 4;
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetContentStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drive_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  uint64_t offset_;
  uint64_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetContentStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetContentStreamResponse) */ {
 public:
  inline GetContentStreamResponse() : GetContentStreamResponse(nullptr) {}
  ~GetContentStreamResponse() override;
  explicit constexpr GetContentStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetContentStreamResponse(const GetContentStreamResponse& from);
  GetContentStreamResponse(GetContentStreamResponse&& from) noexcept
    : GetContentStreamResponse() {
    *this = ::std::move(from);
  }

  inline GetContentStreamResponse& operator=(const GetContentStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetContentStreamResponse& operator=(GetContentStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetContentStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetContentStreamResponse* internal_default_instance() {
    return reinterpret_cast<const GetContentStreamResponse*>(
               &_GetContentStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetContentStreamResponse& a, GetContentStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetContentStreamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetContentStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetContentStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetContentStreamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetContentStreamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetContentStreamResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetContentStreamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.GetContentStreamResponse";
  }
  protected:
  explicit GetContentStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 4,
    kOffsetFieldNumber = 1,
    kCountFieldNumber = 2,
    kTotalSizeFieldNumber = 3,
  };
  // bytes content = 4;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 offset = 1;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // uint64 count = 2;
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // uint64 total_size = 3;
  void clear_total_size();
  uint64_t total_size() const;
  void set_total_size(uint64_t value);
  private:
  uint64_t _internal_total_size() const;
  void _internal_set_total_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetContentStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  uint64_t offset_;
  uint64_t count_;
  uint64_t total_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CreateDriveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.CreateDriveRequest) */ {
 public:
  inline CreateDriveRequest() : CreateDriveRequest(nullptr) {}
  ~CreateDriveRequest() override;
  explicit constexpr CreateDriveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDriveRequest(const CreateDriveRequest& from);
  CreateDriveRequest(CreateDriveRequest&& from) noexcept
    : CreateDriveRequest() {
    *this = ::std::move(from);
  }

  inline CreateDriveRequest& operator=(const CreateDriveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDriveRequest& operator=(CreateDriveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDriveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDriveRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDriveRequest*>(
               &_CreateDriveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateDriveRequest& a, CreateDriveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDriveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDriveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDriveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDriveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDriveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateDriveRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDriveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.CreateDriveRequest";
  }
  protected:
  explicit CreateDriveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.CreateDriveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CreateDriveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.CreateDriveResponse) */ {
 public:
  inline CreateDriveResponse() : CreateDriveResponse(nullptr) {}
  ~CreateDriveResponse() override;
  explicit constexpr CreateDriveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDriveResponse(const CreateDriveResponse& from);
  CreateDriveResponse(CreateDriveResponse&& from) noexcept
    : CreateDriveResponse() {
    *this = ::std::move(from);
  }

  inline CreateDriveResponse& operator=(const CreateDriveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDriveResponse& operator=(CreateDriveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDriveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDriveResponse* internal_default_instance() {
    return reinterpret_cast<const CreateDriveResponse*>(
               &_CreateDriveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CreateDriveResponse& a, CreateDriveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDriveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDriveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDriveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDriveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDriveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateDriveResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDriveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.CreateDriveResponse";
  }
  protected:
  explicit CreateDriveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveFieldNumber = 1,
  };
  // .grpc_services.storage.Drive drive = 1;
  bool has_drive() const;
  private:
  bool _internal_has_drive() const;
  public:
  void clear_drive();
  const ::grpc_services::storage::Drive& drive() const;
  PROTOBUF_NODISCARD ::grpc_services::storage::Drive* release_drive();
  ::grpc_services::storage::Drive* mutable_drive();
  void set_allocated_drive(::grpc_services::storage::Drive* drive);
  private:
  const ::grpc_services::storage::Drive& _internal_drive() const;
  ::grpc_services::storage::Drive* _internal_mutable_drive();
  public:
  void unsafe_arena_set_allocated_drive(
      ::grpc_services::storage::Drive* drive);
  ::grpc_services::storage::Drive* unsafe_arena_release_drive();

  // @@protoc_insertion_point(class_scope:grpc_services.storage.CreateDriveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_services::storage::Drive* drive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CreateItemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.CreateItemRequest) */ {
 public:
  inline CreateItemRequest() : CreateItemRequest(nullptr) {}
  ~CreateItemRequest() override;
  explicit constexpr CreateItemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateItemRequest(const CreateItemRequest& from);
  CreateItemRequest(CreateItemRequest&& from) noexcept
    : CreateItemRequest() {
    *this = ::std::move(from);
  }

  inline CreateItemRequest& operator=(const CreateItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateItemRequest& operator=(CreateItemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateItemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateItemRequest* internal_default_instance() {
    return reinterpret_cast<const CreateItemRequest*>(
               &_CreateItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CreateItemRequest& a, CreateItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateItemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateItemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateItemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateItemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateItemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.CreateItemRequest";
  }
  protected:
  explicit CreateItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kParentIdFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // string drive_id = 1;
  void clear_drive_id();
  const std::string& drive_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_drive_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_drive_id();
  PROTOBUF_NODISCARD std::string* release_drive_id();
  void set_allocated_drive_id(std::string* drive_id);
  private:
  const std::string& _internal_drive_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_drive_id(const std::string& value);
  std::string* _internal_mutable_drive_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string parent_id = 4;
  void clear_parent_id();
  const std::string& parent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_id();
  PROTOBUF_NODISCARD std::string* release_parent_id();
  void set_allocated_parent_id(std::string* parent_id);
  private:
  const std::string& _internal_parent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_id(const std::string& value);
  std::string* _internal_mutable_parent_id();
  public:

  // .grpc_services.storage.ItemType type = 5;
  void clear_type();
  ::grpc_services::storage::ItemType type() const;
  void set_type(::grpc_services::storage::ItemType value);
  private:
  ::grpc_services::storage::ItemType _internal_type() const;
  void _internal_set_type(::grpc_services::storage::ItemType value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.CreateItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drive_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CreateItemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.CreateItemResponse) */ {
 public:
  inline CreateItemResponse() : CreateItemResponse(nullptr) {}
  ~CreateItemResponse() override;
  explicit constexpr CreateItemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateItemResponse(const CreateItemResponse& from);
  CreateItemResponse(CreateItemResponse&& from) noexcept
    : CreateItemResponse() {
    *this = ::std::move(from);
  }

  inline CreateItemResponse& operator=(const CreateItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateItemResponse& operator=(CreateItemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateItemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateItemResponse* internal_default_instance() {
    return reinterpret_cast<const CreateItemResponse*>(
               &_CreateItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CreateItemResponse& a, CreateItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateItemResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateItemResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateItemResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateItemResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateItemResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.CreateItemResponse";
  }
  protected:
  explicit CreateItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .grpc_services.storage.Item item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::grpc_services::storage::Item& item() const;
  PROTOBUF_NODISCARD ::grpc_services::storage::Item* release_item();
  ::grpc_services::storage::Item* mutable_item();
  void set_allocated_item(::grpc_services::storage::Item* item);
  private:
  const ::grpc_services::storage::Item& _internal_item() const;
  ::grpc_services::storage::Item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::grpc_services::storage::Item* item);
  ::grpc_services::storage::Item* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:grpc_services.storage.CreateItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_services::storage::Item* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class PutContentStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.PutContentStreamRequest) */ {
 public:
  inline PutContentStreamRequest() : PutContentStreamRequest(nullptr) {}
  ~PutContentStreamRequest() override;
  explicit constexpr PutContentStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutContentStreamRequest(const PutContentStreamRequest& from);
  PutContentStreamRequest(PutContentStreamRequest&& from) noexcept
    : PutContentStreamRequest() {
    *this = ::std::move(from);
  }

  inline PutContentStreamRequest& operator=(const PutContentStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutContentStreamRequest& operator=(PutContentStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutContentStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutContentStreamRequest* internal_default_instance() {
    return reinterpret_cast<const PutContentStreamRequest*>(
               &_PutContentStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PutContentStreamRequest& a, PutContentStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutContentStreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutContentStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutContentStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutContentStreamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutContentStreamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PutContentStreamRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutContentStreamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.PutContentStreamRequest";
  }
  protected:
  explicit PutContentStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kContentFieldNumber = 4,
    kOffsetFieldNumber = 3,
  };
  // string drive_id = 1;
  void clear_drive_id();
  const std::string& drive_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_drive_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_drive_id();
  PROTOBUF_NODISCARD std::string* release_drive_id();
  void set_allocated_drive_id(std::string* drive_id);
  private:
  const std::string& _internal_drive_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_drive_id(const std::string& value);
  std::string* _internal_mutable_drive_id();
  public:

  // string item_id = 2;
  void clear_item_id();
  const std::string& item_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_id();
  PROTOBUF_NODISCARD std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // bytes content = 4;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 offset = 3;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.PutContentStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drive_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  uint64_t offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class PutContentStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.PutContentStreamResponse) */ {
 public:
  inline PutContentStreamResponse() : PutContentStreamResponse(nullptr) {}
  ~PutContentStreamResponse() override;
  explicit constexpr PutContentStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutContentStreamResponse(const PutContentStreamResponse& from);
  PutContentStreamResponse(PutContentStreamResponse&& from) noexcept
    : PutContentStreamResponse() {
    *this = ::std::move(from);
  }

  inline PutContentStreamResponse& operator=(const PutContentStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutContentStreamResponse& operator=(PutContentStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutContentStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutContentStreamResponse* internal_default_instance() {
    return reinterpret_cast<const PutContentStreamResponse*>(
               &_PutContentStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PutContentStreamResponse& a, PutContentStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutContentStreamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutContentStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutContentStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutContentStreamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutContentStreamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PutContentStreamResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutContentStreamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.PutContentStreamResponse";
  }
  protected:
  explicit PutContentStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .grpc_services.storage.Item item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::grpc_services::storage::Item& item() const;
  PROTOBUF_NODISCARD ::grpc_services::storage::Item* release_item();
  ::grpc_services::storage::Item* mutable_item();
  void set_allocated_item(::grpc_services::storage::Item* item);
  private:
  const ::grpc_services::storage::Item& _internal_item() const;
  ::grpc_services::storage::Item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::grpc_services::storage::Item* item);
  ::grpc_services::storage::Item* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:grpc_services.storage.PutContentStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_services::storage::Item* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class TruncateContentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.TruncateContentRequest) */ {
 public:
  inline TruncateContentRequest() : TruncateContentRequest(nullptr) {}
  ~TruncateContentRequest() override;
  explicit constexpr TruncateContentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TruncateContentRequest(const TruncateContentRequest& from);
  TruncateContentRequest(TruncateContentRequest&& from) noexcept
    : TruncateContentRequest() {
    *this = ::std::move(from);
  }

  inline TruncateContentRequest& operator=(const TruncateContentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TruncateContentRequest& operator=(TruncateContentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TruncateContentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TruncateContentRequest* internal_default_instance() {
    return reinterpret_cast<const TruncateContentRequest*>(
               &_TruncateContentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TruncateContentRequest& a, TruncateContentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TruncateContentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TruncateContentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TruncateContentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TruncateContentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TruncateContentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TruncateContentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TruncateContentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.TruncateContentRequest";
  }
  protected:
  explicit TruncateContentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kNewLengthFieldNumber = 3,
  };
  // string drive_id = 1;
  void clear_drive_id();
  const std::string& drive_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_drive_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_drive_id();
  PROTOBUF_NODISCARD std::string* release_drive_id();
  void set_allocated_drive_id(std::string* drive_id);
  private:
  const std::string& _internal_drive_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_drive_id(const std::string& value);
  std::string* _internal_mutable_drive_id();
  public:

  // string item_id = 2;
  void clear_item_id();
  const std::string& item_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_id();
  PROTOBUF_NODISCARD std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // uint64 new_length = 3;
  void clear_new_length();
  uint64_t new_length() const;
  void set_new_length(uint64_t value);
  private:
  uint64_t _internal_new_length() const;
  void _internal_set_new_length(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.TruncateContentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drive_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  uint64_t new_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class TruncateContentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.TruncateContentResponse) */ {
 public:
  inline TruncateContentResponse() : TruncateContentResponse(nullptr) {}
  ~TruncateContentResponse() override;
  explicit constexpr TruncateContentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TruncateContentResponse(const TruncateContentResponse& from);
  TruncateContentResponse(TruncateContentResponse&& from) noexcept
    : TruncateContentResponse() {
    *this = ::std::move(from);
  }

  inline TruncateContentResponse& operator=(const TruncateContentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TruncateContentResponse& operator=(TruncateContentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TruncateContentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TruncateContentResponse* internal_default_instance() {
    return reinterpret_cast<const TruncateContentResponse*>(
               &_TruncateContentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(TruncateContentResponse& a, TruncateContentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TruncateContentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TruncateContentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TruncateContentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TruncateContentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TruncateContentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TruncateContentResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TruncateContentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.TruncateContentResponse";
  }
  protected:
  explicit TruncateContentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .grpc_services.storage.Item item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::grpc_services::storage::Item& item() const;
  PROTOBUF_NODISCARD ::grpc_services::storage::Item* release_item();
  ::grpc_services::storage::Item* mutable_item();
  void set_allocated_item(::grpc_services::storage::Item* item);
  private:
  const ::grpc_services::storage::Item& _internal_item() const;
  ::grpc_services::storage::Item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::grpc_services::storage::Item* item);
  ::grpc_services::storage::Item* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:grpc_services.storage.TruncateContentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_services::storage::Item* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class UpdateDriveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.UpdateDriveRequest) */ {
 public:
  inline UpdateDriveRequest() : UpdateDriveRequest(nullptr) {}
  ~UpdateDriveRequest() override;
  explicit constexpr UpdateDriveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDriveRequest(const UpdateDriveRequest& from);
  UpdateDriveRequest(UpdateDriveRequest&& from) noexcept
    : UpdateDriveRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDriveRequest& operator=(const UpdateDriveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDriveRequest& operator=(UpdateDriveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDriveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDriveRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDriveRequest*>(
               &_UpdateDriveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UpdateDriveRequest& a, UpdateDriveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDriveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDriveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDriveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDriveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDriveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateDriveRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDriveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.UpdateDriveRequest";
  }
  protected:
  explicit UpdateDriveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveFieldNumber = 1,
  };
  // .grpc_services.storage.Drive drive = 1;
  bool has_drive() const;
  private:
  bool _internal_has_drive() const;
  public:
  void clear_drive();
  const ::grpc_services::storage::Drive& drive() const;
  PROTOBUF_NODISCARD ::grpc_services::storage::Drive* release_drive();
  ::grpc_services::storage::Drive* mutable_drive();
  void set_allocated_drive(::grpc_services::storage::Drive* drive);
  private:
  const ::grpc_services::storage::Drive& _internal_drive() const;
  ::grpc_services::storage::Drive* _internal_mutable_drive();
  public:
  void unsafe_arena_set_allocated_drive(
      ::grpc_services::storage::Drive* drive);
  ::grpc_services::storage::Drive* unsafe_arena_release_drive();

  // @@protoc_insertion_point(class_scope:grpc_services.storage.UpdateDriveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_services::storage::Drive* drive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class UpdateDriveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.UpdateDriveResponse) */ {
 public:
  inline UpdateDriveResponse() : UpdateDriveResponse(nullptr) {}
  ~UpdateDriveResponse() override;
  explicit constexpr UpdateDriveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDriveResponse(const UpdateDriveResponse& from);
  UpdateDriveResponse(UpdateDriveResponse&& from) noexcept
    : UpdateDriveResponse() {
    *this = ::std::move(from);
  }

  inline UpdateDriveResponse& operator=(const UpdateDriveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDriveResponse& operator=(UpdateDriveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDriveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDriveResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateDriveResponse*>(
               &_UpdateDriveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UpdateDriveResponse& a, UpdateDriveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDriveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDriveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDriveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDriveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDriveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateDriveResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDriveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.UpdateDriveResponse";
  }
  protected:
  explicit UpdateDriveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveFieldNumber = 1,
  };
  // .grpc_services.storage.Drive drive = 1;
  bool has_drive() const;
  private:
  bool _internal_has_drive() const;
  public:
  void clear_drive();
  const ::grpc_services::storage::Drive& drive() const;
  PROTOBUF_NODISCARD ::grpc_services::storage::Drive* release_drive();
  ::grpc_services::storage::Drive* mutable_drive();
  void set_allocated_drive(::grpc_services::storage::Drive* drive);
  private:
  const ::grpc_services::storage::Drive& _internal_drive() const;
  ::grpc_services::storage::Drive* _internal_mutable_drive();
  public:
  void unsafe_arena_set_allocated_drive(
      ::grpc_services::storage::Drive* drive);
  ::grpc_services::storage::Drive* unsafe_arena_release_drive();

  // @@protoc_insertion_point(class_scope:grpc_services.storage.UpdateDriveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_services::storage::Drive* drive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class UpdateItemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.UpdateItemRequest) */ {
 public:
  inline UpdateItemRequest() : UpdateItemRequest(nullptr) {}
  ~UpdateItemRequest() override;
  explicit constexpr UpdateItemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateItemRequest(const UpdateItemRequest& from);
  UpdateItemRequest(UpdateItemRequest&& from) noexcept
    : UpdateItemRequest() {
    *this = ::std::move(from);
  }

  inline UpdateItemRequest& operator=(const UpdateItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateItemRequest& operator=(UpdateItemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateItemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateItemRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateItemRequest*>(
               &_UpdateItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UpdateItemRequest& a, UpdateItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateItemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateItemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateItemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateItemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateItemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.UpdateItemRequest";
  }
  protected:
  explicit UpdateItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveFieldNumber = 1,
    kItemFieldNumber = 2,
  };
  // string drive = 1;
  void clear_drive();
  const std::string& drive() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_drive(ArgT0&& arg0, ArgT... args);
  std::string* mutable_drive();
  PROTOBUF_NODISCARD std::string* release_drive();
  void set_allocated_drive(std::string* drive);
  private:
  const std::string& _internal_drive() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_drive(const std::string& value);
  std::string* _internal_mutable_drive();
  public:

  // .grpc_services.storage.Item item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::grpc_services::storage::Item& item() const;
  PROTOBUF_NODISCARD ::grpc_services::storage::Item* release_item();
  ::grpc_services::storage::Item* mutable_item();
  void set_allocated_item(::grpc_services::storage::Item* item);
  private:
  const ::grpc_services::storage::Item& _internal_item() const;
  ::grpc_services::storage::Item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::grpc_services::storage::Item* item);
  ::grpc_services::storage::Item* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:grpc_services.storage.UpdateItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drive_;
  ::grpc_services::storage::Item* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class UpdateItemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.UpdateItemResponse) */ {
 public:
  inline UpdateItemResponse() : UpdateItemResponse(nullptr) {}
  ~UpdateItemResponse() override;
  explicit constexpr UpdateItemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateItemResponse(const UpdateItemResponse& from);
  UpdateItemResponse(UpdateItemResponse&& from) noexcept
    : UpdateItemResponse() {
    *this = ::std::move(from);
  }

  inline UpdateItemResponse& operator=(const UpdateItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateItemResponse& operator=(UpdateItemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateItemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateItemResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateItemResponse*>(
               &_UpdateItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UpdateItemResponse& a, UpdateItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateItemResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateItemResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateItemResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateItemResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateItemResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.UpdateItemResponse";
  }
  protected:
  explicit UpdateItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .grpc_services.storage.Item item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::grpc_services::storage::Item& item() const;
  PROTOBUF_NODISCARD ::grpc_services::storage::Item* release_item();
  ::grpc_services::storage::Item* mutable_item();
  void set_allocated_item(::grpc_services::storage::Item* item);
  private:
  const ::grpc_services::storage::Item& _internal_item() const;
  ::grpc_services::storage::Item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::grpc_services::storage::Item* item);
  ::grpc_services::storage::Item* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:grpc_services.storage.UpdateItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_services::storage::Item* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class RemoveDriveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.RemoveDriveRequest) */ {
 public:
  inline RemoveDriveRequest() : RemoveDriveRequest(nullptr) {}
  ~RemoveDriveRequest() override;
  explicit constexpr RemoveDriveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveDriveRequest(const RemoveDriveRequest& from);
  RemoveDriveRequest(RemoveDriveRequest&& from) noexcept
    : RemoveDriveRequest() {
    *this = ::std::move(from);
  }

  inline RemoveDriveRequest& operator=(const RemoveDriveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveDriveRequest& operator=(RemoveDriveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveDriveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveDriveRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveDriveRequest*>(
               &_RemoveDriveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(RemoveDriveRequest& a, RemoveDriveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveDriveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveDriveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveDriveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveDriveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveDriveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveDriveRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveDriveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.RemoveDriveRequest";
  }
  protected:
  explicit RemoveDriveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveIdFieldNumber = 1,
  };
  // string drive_id = 1;
  void clear_drive_id();
  const std::string& drive_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_drive_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_drive_id();
  PROTOBUF_NODISCARD std::string* release_drive_id();
  void set_allocated_drive_id(std::string* drive_id);
  private:
  const std::string& _internal_drive_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_drive_id(const std::string& value);
  std::string* _internal_mutable_drive_id();
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.RemoveDriveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drive_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class RemoveDriveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:grpc_services.storage.RemoveDriveResponse) */ {
 public:
  inline RemoveDriveResponse() : RemoveDriveResponse(nullptr) {}
  explicit constexpr RemoveDriveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveDriveResponse(const RemoveDriveResponse& from);
  RemoveDriveResponse(RemoveDriveResponse&& from) noexcept
    : RemoveDriveResponse() {
    *this = ::std::move(from);
  }

  inline RemoveDriveResponse& operator=(const RemoveDriveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveDriveResponse& operator=(RemoveDriveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveDriveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveDriveResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveDriveResponse*>(
               &_RemoveDriveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RemoveDriveResponse& a, RemoveDriveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveDriveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveDriveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveDriveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveDriveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RemoveDriveResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RemoveDriveResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.RemoveDriveResponse";
  }
  protected:
  explicit RemoveDriveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grpc_services.storage.RemoveDriveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class RemoveItemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.RemoveItemRequest) */ {
 public:
  inline RemoveItemRequest() : RemoveItemRequest(nullptr) {}
  ~RemoveItemRequest() override;
  explicit constexpr RemoveItemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveItemRequest(const RemoveItemRequest& from);
  RemoveItemRequest(RemoveItemRequest&& from) noexcept
    : RemoveItemRequest() {
    *this = ::std::move(from);
  }

  inline RemoveItemRequest& operator=(const RemoveItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveItemRequest& operator=(RemoveItemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveItemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveItemRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveItemRequest*>(
               &_RemoveItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(RemoveItemRequest& a, RemoveItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveItemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveItemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveItemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveItemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveItemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.RemoveItemRequest";
  }
  protected:
  explicit RemoveItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
  };
  // string drive_id = 1;
  void clear_drive_id();
  const std::string& drive_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_drive_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_drive_id();
  PROTOBUF_NODISCARD std::string* release_drive_id();
  void set_allocated_drive_id(std::string* drive_id);
  private:
  const std::string& _internal_drive_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_drive_id(const std::string& value);
  std::string* _internal_mutable_drive_id();
  public:

  // string item_id = 2;
  void clear_item_id();
  const std::string& item_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_id();
  PROTOBUF_NODISCARD std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.RemoveItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drive_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class RemoveItemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:grpc_services.storage.RemoveItemResponse) */ {
 public:
  inline RemoveItemResponse() : RemoveItemResponse(nullptr) {}
  explicit constexpr RemoveItemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveItemResponse(const RemoveItemResponse& from);
  RemoveItemResponse(RemoveItemResponse&& from) noexcept
    : RemoveItemResponse() {
    *this = ::std::move(from);
  }

  inline RemoveItemResponse& operator=(const RemoveItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveItemResponse& operator=(RemoveItemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveItemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveItemResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveItemResponse*>(
               &_RemoveItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(RemoveItemResponse& a, RemoveItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveItemResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveItemResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RemoveItemResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RemoveItemResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.RemoveItemResponse";
  }
  protected:
  explicit RemoveItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grpc_services.storage.RemoveItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class WatchChangesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.WatchChangesRequest) */ {
 public:
  inline WatchChangesRequest() : WatchChangesRequest(nullptr) {}
  ~WatchChangesRequest() override;
  explicit constexpr WatchChangesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchChangesRequest(const WatchChangesRequest& from);
  WatchChangesRequest(WatchChangesRequest&& from) noexcept
    : WatchChangesRequest() {
    *this = ::std::move(from);
  }

  inline WatchChangesRequest& operator=(const WatchChangesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchChangesRequest& operator=(WatchChangesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchChangesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchChangesRequest* internal_default_instance() {
    return reinterpret_cast<const WatchChangesRequest*>(
               &_WatchChangesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(WatchChangesRequest& a, WatchChangesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchChangesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchChangesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchChangesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchChangesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchChangesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchChangesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchChangesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.WatchChangesRequest";
  }
  protected:
  explicit WatchChangesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveIdFieldNumber = 1,
  };
  // string drive_id = 1;
  void clear_drive_id();
  const std::string& drive_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_drive_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_drive_id();
  PROTOBUF_NODISCARD std::string* release_drive_id();
  void set_allocated_drive_id(std::string* drive_id);
  private:
  const std::string& _internal_drive_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_drive_id(const std::string& value);
  std::string* _internal_mutable_drive_id();
  public:

  // @@protoc_insertion_point(class_scope:grpc_services.storage.WatchChangesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drive_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class WatchChangesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.WatchChangesResponse) */ {
 public:
  inline WatchChangesResponse() : WatchChangesResponse(nullptr) {}
  ~WatchChangesResponse() override;
  explicit constexpr WatchChangesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchChangesResponse(const WatchChangesResponse& from);
  WatchChangesResponse(WatchChangesResponse&& from) noexcept
    : WatchChangesResponse() {
    *this = ::std::move(from);
  }

  inline WatchChangesResponse& operator=(const WatchChangesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchChangesResponse& operator=(WatchChangesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchChangesResponse& default_instance() {
    return *internal_default_instance();
  }
  enum TestEventCase {
    kCreated = 1,
    kRemoved = 2,
    kUpdated = 3,
    TEST_EVENT_NOT_SET = 0,
  };

  static inline const WatchChangesResponse* internal_default_instance() {
    return reinterpret_cast<const WatchChangesResponse*>(
               &_WatchChangesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(WatchChangesResponse& a, WatchChangesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchChangesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchChangesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchChangesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchChangesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchChangesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchChangesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchChangesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_services.storage.WatchChangesResponse";
  }
  protected:
  explicit WatchChangesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedFieldNumber = 1,
    kRemovedFieldNumber = 2,
    kUpdatedFieldNumber = 3,
  };
  // .grpc_services.storage.ItemCreatedEvent created = 1;
  bool has_created() const;
  private:
  bool _internal_has_created() const;
  public:
  void clear_created();
  const ::grpc_services::storage::ItemCreatedEvent& created() const;
  PROTOBUF_NODISCARD ::grpc_services::storage::ItemCreatedEvent* release_created();
  ::grpc_services::storage::ItemCreatedEvent* mutable_created();
  void set_allocated_created(::grpc_services::storage::ItemCreatedEvent* created);
  private:
  const ::grpc_services::storage::ItemCreatedEvent& _internal_created() const;
  ::grpc_services::storage::ItemCreatedEvent* _internal_mutable_created();
  public:
  void unsafe_arena_set_allocated_created(
      ::grpc_services::storage::ItemCreatedEvent* created);
  ::grpc_services::storage::ItemCreatedEvent* unsafe_arena_release_created();

  // .grpc_services.storage.ItemRemovedEvent removed = 2;
  bool has_removed() const;
  private:
  bool _internal_has_removed() const;
  public:
  void clear_removed();
  const ::grpc_services::storage::ItemRemovedEvent& removed() const;
  PROTOBUF_NODISCARD ::grpc_services::storage::ItemRemovedEvent* release_removed();
  ::grpc_services::storage::ItemRemovedEvent* mutable_removed();
  void set_allocated_removed(::grpc_services::storage::ItemRemovedEvent* removed);
  private:
  const ::grpc_services::storage::ItemRemovedEvent& _internal_removed() const;
  ::grpc_services::storage::ItemRemovedEvent* _internal_mutable_removed();
  public:
  void unsafe_arena_set_allocated_removed(
      ::grpc_services::storage::ItemRemovedEvent* removed);
  ::grpc_services::storage::ItemRemovedEvent* unsafe_arena_release_removed();

  // .grpc_services.storage.ItemContentUpdatedEvent updated = 3;
  bool has_updated() const;
  private:
  bool _internal_has_updated() const;
  public:
  void clear_updated();
  const ::grpc_services::storage::ItemContentUpdatedEvent& updated() const;
  PROTOBUF_NODISCARD ::grpc_services::storage::ItemContentUpdatedEvent* release_updated();
  ::grpc_services::storage::ItemContentUpdatedEvent* mutable_updated();
  void set_allocated_updated(::grpc_services::storage::ItemContentUpdatedEvent* updated);
  private:
  const ::grpc_services::storage::ItemContentUpdatedEvent& _internal_updated() const;
  ::grpc_services::storage::ItemContentUpdatedEvent* _internal_mutable_updated();
  public:
  void unsafe_arena_set_allocated_updated(
      ::grpc_services::storage::ItemContentUpdatedEvent* updated);
  ::grpc_services::storage::ItemContentUpdatedEvent* unsafe_arena_release_updated();

  void clear_test_event();
  TestEventCase test_event_case() const;
  // @@protoc_insertion_point(class_scope:grpc_services.storage.WatchChangesResponse)
 private:
  class _Internal;
  void set_has_created();
  void set_has_removed();
  void set_has_updated();

  inline bool has_test_event() const;
  inline void clear_has_test_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TestEventUnion {
    constexpr TestEventUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::grpc_services::storage::ItemCreatedEvent* created_;
    ::grpc_services::storage::ItemRemovedEvent* removed_;
    ::grpc_services::storage::ItemContentUpdatedEvent* updated_;
  } test_event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_grpc_5fservices_2fstorage_2fstorage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetDriveRequest

// string drive_id = 1;
inline void GetDriveRequest::clear_drive_id() {
  drive_id_.ClearToEmpty();
}
inline const std::string& GetDriveRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetDriveRequest.drive_id)
  return _internal_drive_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDriveRequest::set_drive_id(ArgT0&& arg0, ArgT... args) {
 
 drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetDriveRequest.drive_id)
}
inline std::string* GetDriveRequest::mutable_drive_id() {
  std::string* _s = _internal_mutable_drive_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetDriveRequest.drive_id)
  return _s;
}
inline const std::string& GetDriveRequest::_internal_drive_id() const {
  return drive_id_.Get();
}
inline void GetDriveRequest::_internal_set_drive_id(const std::string& value) {
  
  drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDriveRequest::_internal_mutable_drive_id() {
  
  return drive_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDriveRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetDriveRequest.drive_id)
  return drive_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDriveRequest::set_allocated_drive_id(std::string* drive_id) {
  if (drive_id != nullptr) {
    
  } else {
    
  }
  drive_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), drive_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (drive_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    drive_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetDriveRequest.drive_id)
}

// -------------------------------------------------------------------

// GetDriveResponse

// .grpc_services.storage.Drive drive = 1;
inline bool GetDriveResponse::_internal_has_drive() const {
  return this != internal_default_instance() && drive_ != nullptr;
}
inline bool GetDriveResponse::has_drive() const {
  return _internal_has_drive();
}
inline const ::grpc_services::storage::Drive& GetDriveResponse::_internal_drive() const {
  const ::grpc_services::storage::Drive* p = drive_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_services::storage::Drive&>(
      ::grpc_services::storage::_Drive_default_instance_);
}
inline const ::grpc_services::storage::Drive& GetDriveResponse::drive() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetDriveResponse.drive)
  return _internal_drive();
}
inline void GetDriveResponse::unsafe_arena_set_allocated_drive(
    ::grpc_services::storage::Drive* drive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drive_);
  }
  drive_ = drive;
  if (drive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_services.storage.GetDriveResponse.drive)
}
inline ::grpc_services::storage::Drive* GetDriveResponse::release_drive() {
  
  ::grpc_services::storage::Drive* temp = drive_;
  drive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc_services::storage::Drive* GetDriveResponse::unsafe_arena_release_drive() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetDriveResponse.drive)
  
  ::grpc_services::storage::Drive* temp = drive_;
  drive_ = nullptr;
  return temp;
}
inline ::grpc_services::storage::Drive* GetDriveResponse::_internal_mutable_drive() {
  
  if (drive_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_services::storage::Drive>(GetArenaForAllocation());
    drive_ = p;
  }
  return drive_;
}
inline ::grpc_services::storage::Drive* GetDriveResponse::mutable_drive() {
  ::grpc_services::storage::Drive* _msg = _internal_mutable_drive();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetDriveResponse.drive)
  return _msg;
}
inline void GetDriveResponse::set_allocated_drive(::grpc_services::storage::Drive* drive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drive_);
  }
  if (drive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drive));
    if (message_arena != submessage_arena) {
      drive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drive, submessage_arena);
    }
    
  } else {
    
  }
  drive_ = drive;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetDriveResponse.drive)
}

// -------------------------------------------------------------------

// GetDrivesRequest

// -------------------------------------------------------------------

// GetDrivesResponse

// repeated .grpc_services.storage.Drive drives = 1;
inline int GetDrivesResponse::_internal_drives_size() const {
  return drives_.size();
}
inline int GetDrivesResponse::drives_size() const {
  return _internal_drives_size();
}
inline ::grpc_services::storage::Drive* GetDrivesResponse::mutable_drives(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetDrivesResponse.drives)
  return drives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_services::storage::Drive >*
GetDrivesResponse::mutable_drives() {
  // @@protoc_insertion_point(field_mutable_list:grpc_services.storage.GetDrivesResponse.drives)
  return &drives_;
}
inline const ::grpc_services::storage::Drive& GetDrivesResponse::_internal_drives(int index) const {
  return drives_.Get(index);
}
inline const ::grpc_services::storage::Drive& GetDrivesResponse::drives(int index) const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetDrivesResponse.drives)
  return _internal_drives(index);
}
inline ::grpc_services::storage::Drive* GetDrivesResponse::_internal_add_drives() {
  return drives_.Add();
}
inline ::grpc_services::storage::Drive* GetDrivesResponse::add_drives() {
  ::grpc_services::storage::Drive* _add = _internal_add_drives();
  // @@protoc_insertion_point(field_add:grpc_services.storage.GetDrivesResponse.drives)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_services::storage::Drive >&
GetDrivesResponse::drives() const {
  // @@protoc_insertion_point(field_list:grpc_services.storage.GetDrivesResponse.drives)
  return drives_;
}

// -------------------------------------------------------------------

// GetItemRequest

// string drive_id = 1;
inline void GetItemRequest::clear_drive_id() {
  drive_id_.ClearToEmpty();
}
inline const std::string& GetItemRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetItemRequest.drive_id)
  return _internal_drive_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetItemRequest::set_drive_id(ArgT0&& arg0, ArgT... args) {
 
 drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetItemRequest.drive_id)
}
inline std::string* GetItemRequest::mutable_drive_id() {
  std::string* _s = _internal_mutable_drive_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetItemRequest.drive_id)
  return _s;
}
inline const std::string& GetItemRequest::_internal_drive_id() const {
  return drive_id_.Get();
}
inline void GetItemRequest::_internal_set_drive_id(const std::string& value) {
  
  drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetItemRequest::_internal_mutable_drive_id() {
  
  return drive_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetItemRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetItemRequest.drive_id)
  return drive_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetItemRequest::set_allocated_drive_id(std::string* drive_id) {
  if (drive_id != nullptr) {
    
  } else {
    
  }
  drive_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), drive_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (drive_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    drive_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetItemRequest.drive_id)
}

// string item_id = 2;
inline void GetItemRequest::clear_item_id() {
  item_id_.ClearToEmpty();
}
inline const std::string& GetItemRequest::item_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetItemRequest.item_id)
  return _internal_item_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetItemRequest::set_item_id(ArgT0&& arg0, ArgT... args) {
 
 item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetItemRequest.item_id)
}
inline std::string* GetItemRequest::mutable_item_id() {
  std::string* _s = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetItemRequest.item_id)
  return _s;
}
inline const std::string& GetItemRequest::_internal_item_id() const {
  return item_id_.Get();
}
inline void GetItemRequest::_internal_set_item_id(const std::string& value) {
  
  item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetItemRequest::_internal_mutable_item_id() {
  
  return item_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetItemRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetItemRequest.item_id)
  return item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetItemRequest::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetItemRequest.item_id)
}

// -------------------------------------------------------------------

// GetItemResponse

// .grpc_services.storage.Item item = 1;
inline bool GetItemResponse::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool GetItemResponse::has_item() const {
  return _internal_has_item();
}
inline const ::grpc_services::storage::Item& GetItemResponse::_internal_item() const {
  const ::grpc_services::storage::Item* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_services::storage::Item&>(
      ::grpc_services::storage::_Item_default_instance_);
}
inline const ::grpc_services::storage::Item& GetItemResponse::item() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetItemResponse.item)
  return _internal_item();
}
inline void GetItemResponse::unsafe_arena_set_allocated_item(
    ::grpc_services::storage::Item* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_services.storage.GetItemResponse.item)
}
inline ::grpc_services::storage::Item* GetItemResponse::release_item() {
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc_services::storage::Item* GetItemResponse::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetItemResponse.item)
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::grpc_services::storage::Item* GetItemResponse::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_services::storage::Item>(GetArenaForAllocation());
    item_ = p;
  }
  return item_;
}
inline ::grpc_services::storage::Item* GetItemResponse::mutable_item() {
  ::grpc_services::storage::Item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetItemResponse.item)
  return _msg;
}
inline void GetItemResponse::set_allocated_item(::grpc_services::storage::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetItemResponse.item)
}

// -------------------------------------------------------------------

// GetChildrenRequest

// string drive_id = 1;
inline void GetChildrenRequest::clear_drive_id() {
  drive_id_.ClearToEmpty();
}
inline const std::string& GetChildrenRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetChildrenRequest.drive_id)
  return _internal_drive_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChildrenRequest::set_drive_id(ArgT0&& arg0, ArgT... args) {
 
 drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetChildrenRequest.drive_id)
}
inline std::string* GetChildrenRequest::mutable_drive_id() {
  std::string* _s = _internal_mutable_drive_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetChildrenRequest.drive_id)
  return _s;
}
inline const std::string& GetChildrenRequest::_internal_drive_id() const {
  return drive_id_.Get();
}
inline void GetChildrenRequest::_internal_set_drive_id(const std::string& value) {
  
  drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetChildrenRequest::_internal_mutable_drive_id() {
  
  return drive_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetChildrenRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetChildrenRequest.drive_id)
  return drive_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetChildrenRequest::set_allocated_drive_id(std::string* drive_id) {
  if (drive_id != nullptr) {
    
  } else {
    
  }
  drive_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), drive_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (drive_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    drive_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetChildrenRequest.drive_id)
}

// string item_id = 2;
inline void GetChildrenRequest::clear_item_id() {
  item_id_.ClearToEmpty();
}
inline const std::string& GetChildrenRequest::item_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetChildrenRequest.item_id)
  return _internal_item_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChildrenRequest::set_item_id(ArgT0&& arg0, ArgT... args) {
 
 item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetChildrenRequest.item_id)
}
inline std::string* GetChildrenRequest::mutable_item_id() {
  std::string* _s = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetChildrenRequest.item_id)
  return _s;
}
inline const std::string& GetChildrenRequest::_internal_item_id() const {
  return item_id_.Get();
}
inline void GetChildrenRequest::_internal_set_item_id(const std::string& value) {
  
  item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetChildrenRequest::_internal_mutable_item_id() {
  
  return item_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetChildrenRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetChildrenRequest.item_id)
  return item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetChildrenRequest::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetChildrenRequest.item_id)
}

// uint64 offset = 3;
inline void GetChildrenRequest::clear_offset() {
  offset_ = uint64_t{0u};
}
inline uint64_t GetChildrenRequest::_internal_offset() const {
  return offset_;
}
inline uint64_t GetChildrenRequest::offset() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetChildrenRequest.offset)
  return _internal_offset();
}
inline void GetChildrenRequest::_internal_set_offset(uint64_t value) {
  
  offset_ = value;
}
inline void GetChildrenRequest::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetChildrenRequest.offset)
}

// uint64 count = 4;
inline void GetChildrenRequest::clear_count() {
  count_ = uint64_t{0u};
}
inline uint64_t GetChildrenRequest::_internal_count() const {
  return count_;
}
inline uint64_t GetChildrenRequest::count() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetChildrenRequest.count)
  return _internal_count();
}
inline void GetChildrenRequest::_internal_set_count(uint64_t value) {
  
  count_ = value;
}
inline void GetChildrenRequest::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetChildrenRequest.count)
}

// -------------------------------------------------------------------

// GetChildrenResponse

// uint64 offset = 1;
inline void GetChildrenResponse::clear_offset() {
  offset_ = uint64_t{0u};
}
inline uint64_t GetChildrenResponse::_internal_offset() const {
  return offset_;
}
inline uint64_t GetChildrenResponse::offset() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetChildrenResponse.offset)
  return _internal_offset();
}
inline void GetChildrenResponse::_internal_set_offset(uint64_t value) {
  
  offset_ = value;
}
inline void GetChildrenResponse::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetChildrenResponse.offset)
}

// uint64 total = 2;
inline void GetChildrenResponse::clear_total() {
  total_ = uint64_t{0u};
}
inline uint64_t GetChildrenResponse::_internal_total() const {
  return total_;
}
inline uint64_t GetChildrenResponse::total() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetChildrenResponse.total)
  return _internal_total();
}
inline void GetChildrenResponse::_internal_set_total(uint64_t value) {
  
  total_ = value;
}
inline void GetChildrenResponse::set_total(uint64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetChildrenResponse.total)
}

// repeated .grpc_services.storage.Item children = 3;
inline int GetChildrenResponse::_internal_children_size() const {
  return children_.size();
}
inline int GetChildrenResponse::children_size() const {
  return _internal_children_size();
}
inline ::grpc_services::storage::Item* GetChildrenResponse::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetChildrenResponse.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_services::storage::Item >*
GetChildrenResponse::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:grpc_services.storage.GetChildrenResponse.children)
  return &children_;
}
inline const ::grpc_services::storage::Item& GetChildrenResponse::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::grpc_services::storage::Item& GetChildrenResponse::children(int index) const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetChildrenResponse.children)
  return _internal_children(index);
}
inline ::grpc_services::storage::Item* GetChildrenResponse::_internal_add_children() {
  return children_.Add();
}
inline ::grpc_services::storage::Item* GetChildrenResponse::add_children() {
  ::grpc_services::storage::Item* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:grpc_services.storage.GetChildrenResponse.children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_services::storage::Item >&
GetChildrenResponse::children() const {
  // @@protoc_insertion_point(field_list:grpc_services.storage.GetChildrenResponse.children)
  return children_;
}

// -------------------------------------------------------------------

// GetContentRequest

// string drive_id = 1;
inline void GetContentRequest::clear_drive_id() {
  drive_id_.ClearToEmpty();
}
inline const std::string& GetContentRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentRequest.drive_id)
  return _internal_drive_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetContentRequest::set_drive_id(ArgT0&& arg0, ArgT... args) {
 
 drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentRequest.drive_id)
}
inline std::string* GetContentRequest::mutable_drive_id() {
  std::string* _s = _internal_mutable_drive_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetContentRequest.drive_id)
  return _s;
}
inline const std::string& GetContentRequest::_internal_drive_id() const {
  return drive_id_.Get();
}
inline void GetContentRequest::_internal_set_drive_id(const std::string& value) {
  
  drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetContentRequest::_internal_mutable_drive_id() {
  
  return drive_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetContentRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetContentRequest.drive_id)
  return drive_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetContentRequest::set_allocated_drive_id(std::string* drive_id) {
  if (drive_id != nullptr) {
    
  } else {
    
  }
  drive_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), drive_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (drive_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    drive_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetContentRequest.drive_id)
}

// string item_id = 2;
inline void GetContentRequest::clear_item_id() {
  item_id_.ClearToEmpty();
}
inline const std::string& GetContentRequest::item_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentRequest.item_id)
  return _internal_item_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetContentRequest::set_item_id(ArgT0&& arg0, ArgT... args) {
 
 item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentRequest.item_id)
}
inline std::string* GetContentRequest::mutable_item_id() {
  std::string* _s = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetContentRequest.item_id)
  return _s;
}
inline const std::string& GetContentRequest::_internal_item_id() const {
  return item_id_.Get();
}
inline void GetContentRequest::_internal_set_item_id(const std::string& value) {
  
  item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetContentRequest::_internal_mutable_item_id() {
  
  return item_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetContentRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetContentRequest.item_id)
  return item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetContentRequest::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetContentRequest.item_id)
}

// uint64 offset = 3;
inline void GetContentRequest::clear_offset() {
  offset_ = uint64_t{0u};
}
inline uint64_t GetContentRequest::_internal_offset() const {
  return offset_;
}
inline uint64_t GetContentRequest::offset() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentRequest.offset)
  return _internal_offset();
}
inline void GetContentRequest::_internal_set_offset(uint64_t value) {
  
  offset_ = value;
}
inline void GetContentRequest::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentRequest.offset)
}

// uint64 count = 4;
inline void GetContentRequest::clear_count() {
  count_ = uint64_t{0u};
}
inline uint64_t GetContentRequest::_internal_count() const {
  return count_;
}
inline uint64_t GetContentRequest::count() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentRequest.count)
  return _internal_count();
}
inline void GetContentRequest::_internal_set_count(uint64_t value) {
  
  count_ = value;
}
inline void GetContentRequest::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentRequest.count)
}

// -------------------------------------------------------------------

// GetContentResponse

// uint64 offset = 1;
inline void GetContentResponse::clear_offset() {
  offset_ = uint64_t{0u};
}
inline uint64_t GetContentResponse::_internal_offset() const {
  return offset_;
}
inline uint64_t GetContentResponse::offset() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentResponse.offset)
  return _internal_offset();
}
inline void GetContentResponse::_internal_set_offset(uint64_t value) {
  
  offset_ = value;
}
inline void GetContentResponse::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentResponse.offset)
}

// uint64 count = 2;
inline void GetContentResponse::clear_count() {
  count_ = uint64_t{0u};
}
inline uint64_t GetContentResponse::_internal_count() const {
  return count_;
}
inline uint64_t GetContentResponse::count() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentResponse.count)
  return _internal_count();
}
inline void GetContentResponse::_internal_set_count(uint64_t value) {
  
  count_ = value;
}
inline void GetContentResponse::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentResponse.count)
}

// uint64 total_size = 3;
inline void GetContentResponse::clear_total_size() {
  total_size_ = uint64_t{0u};
}
inline uint64_t GetContentResponse::_internal_total_size() const {
  return total_size_;
}
inline uint64_t GetContentResponse::total_size() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentResponse.total_size)
  return _internal_total_size();
}
inline void GetContentResponse::_internal_set_total_size(uint64_t value) {
  
  total_size_ = value;
}
inline void GetContentResponse::set_total_size(uint64_t value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentResponse.total_size)
}

// bytes content = 4;
inline void GetContentResponse::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& GetContentResponse::content() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentResponse.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetContentResponse::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentResponse.content)
}
inline std::string* GetContentResponse::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetContentResponse.content)
  return _s;
}
inline const std::string& GetContentResponse::_internal_content() const {
  return content_.Get();
}
inline void GetContentResponse::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetContentResponse::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetContentResponse::release_content() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetContentResponse.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetContentResponse::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetContentResponse.content)
}

// -------------------------------------------------------------------

// GetContentStreamRequest

// string drive_id = 1;
inline void GetContentStreamRequest::clear_drive_id() {
  drive_id_.ClearToEmpty();
}
inline const std::string& GetContentStreamRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamRequest.drive_id)
  return _internal_drive_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetContentStreamRequest::set_drive_id(ArgT0&& arg0, ArgT... args) {
 
 drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamRequest.drive_id)
}
inline std::string* GetContentStreamRequest::mutable_drive_id() {
  std::string* _s = _internal_mutable_drive_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetContentStreamRequest.drive_id)
  return _s;
}
inline const std::string& GetContentStreamRequest::_internal_drive_id() const {
  return drive_id_.Get();
}
inline void GetContentStreamRequest::_internal_set_drive_id(const std::string& value) {
  
  drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetContentStreamRequest::_internal_mutable_drive_id() {
  
  return drive_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetContentStreamRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetContentStreamRequest.drive_id)
  return drive_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetContentStreamRequest::set_allocated_drive_id(std::string* drive_id) {
  if (drive_id != nullptr) {
    
  } else {
    
  }
  drive_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), drive_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (drive_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    drive_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetContentStreamRequest.drive_id)
}

// string item_id = 2;
inline void GetContentStreamRequest::clear_item_id() {
  item_id_.ClearToEmpty();
}
inline const std::string& GetContentStreamRequest::item_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamRequest.item_id)
  return _internal_item_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetContentStreamRequest::set_item_id(ArgT0&& arg0, ArgT... args) {
 
 item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamRequest.item_id)
}
inline std::string* GetContentStreamRequest::mutable_item_id() {
  std::string* _s = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetContentStreamRequest.item_id)
  return _s;
}
inline const std::string& GetContentStreamRequest::_internal_item_id() const {
  return item_id_.Get();
}
inline void GetContentStreamRequest::_internal_set_item_id(const std::string& value) {
  
  item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetContentStreamRequest::_internal_mutable_item_id() {
  
  return item_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetContentStreamRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetContentStreamRequest.item_id)
  return item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetContentStreamRequest::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetContentStreamRequest.item_id)
}

// uint64 offset = 3;
inline void GetContentStreamRequest::clear_offset() {
  offset_ = uint64_t{0u};
}
inline uint64_t GetContentStreamRequest::_internal_offset() const {
  return offset_;
}
inline uint64_t GetContentStreamRequest::offset() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamRequest.offset)
  return _internal_offset();
}
inline void GetContentStreamRequest::_internal_set_offset(uint64_t value) {
  
  offset_ = value;
}
inline void GetContentStreamRequest::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamRequest.offset)
}

// uint64 count = 4;
inline void GetContentStreamRequest::clear_count() {
  count_ = uint64_t{0u};
}
inline uint64_t GetContentStreamRequest::_internal_count() const {
  return count_;
}
inline uint64_t GetContentStreamRequest::count() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamRequest.count)
  return _internal_count();
}
inline void GetContentStreamRequest::_internal_set_count(uint64_t value) {
  
  count_ = value;
}
inline void GetContentStreamRequest::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamRequest.count)
}

// -------------------------------------------------------------------

// GetContentStreamResponse

// uint64 offset = 1;
inline void GetContentStreamResponse::clear_offset() {
  offset_ = uint64_t{0u};
}
inline uint64_t GetContentStreamResponse::_internal_offset() const {
  return offset_;
}
inline uint64_t GetContentStreamResponse::offset() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamResponse.offset)
  return _internal_offset();
}
inline void GetContentStreamResponse::_internal_set_offset(uint64_t value) {
  
  offset_ = value;
}
inline void GetContentStreamResponse::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamResponse.offset)
}

// uint64 count = 2;
inline void GetContentStreamResponse::clear_count() {
  count_ = uint64_t{0u};
}
inline uint64_t GetContentStreamResponse::_internal_count() const {
  return count_;
}
inline uint64_t GetContentStreamResponse::count() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamResponse.count)
  return _internal_count();
}
inline void GetContentStreamResponse::_internal_set_count(uint64_t value) {
  
  count_ = value;
}
inline void GetContentStreamResponse::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamResponse.count)
}

// uint64 total_size = 3;
inline void GetContentStreamResponse::clear_total_size() {
  total_size_ = uint64_t{0u};
}
inline uint64_t GetContentStreamResponse::_internal_total_size() const {
  return total_size_;
}
inline uint64_t GetContentStreamResponse::total_size() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamResponse.total_size)
  return _internal_total_size();
}
inline void GetContentStreamResponse::_internal_set_total_size(uint64_t value) {
  
  total_size_ = value;
}
inline void GetContentStreamResponse::set_total_size(uint64_t value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamResponse.total_size)
}

// bytes content = 4;
inline void GetContentStreamResponse::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& GetContentStreamResponse::content() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamResponse.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetContentStreamResponse::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamResponse.content)
}
inline std::string* GetContentStreamResponse::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetContentStreamResponse.content)
  return _s;
}
inline const std::string& GetContentStreamResponse::_internal_content() const {
  return content_.Get();
}
inline void GetContentStreamResponse::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetContentStreamResponse::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetContentStreamResponse::release_content() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetContentStreamResponse.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetContentStreamResponse::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetContentStreamResponse.content)
}

// -------------------------------------------------------------------

// CreateDriveRequest

// string name = 1;
inline void CreateDriveRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateDriveRequest::name() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateDriveRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDriveRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.CreateDriveRequest.name)
}
inline std::string* CreateDriveRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateDriveRequest.name)
  return _s;
}
inline const std::string& CreateDriveRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateDriveRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateDriveRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateDriveRequest::release_name() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateDriveRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateDriveRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateDriveRequest.name)
}

// string description = 2;
inline void CreateDriveRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& CreateDriveRequest::description() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateDriveRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDriveRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.CreateDriveRequest.description)
}
inline std::string* CreateDriveRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateDriveRequest.description)
  return _s;
}
inline const std::string& CreateDriveRequest::_internal_description() const {
  return description_.Get();
}
inline void CreateDriveRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateDriveRequest::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateDriveRequest::release_description() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateDriveRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateDriveRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateDriveRequest.description)
}

// -------------------------------------------------------------------

// CreateDriveResponse

// .grpc_services.storage.Drive drive = 1;
inline bool CreateDriveResponse::_internal_has_drive() const {
  return this != internal_default_instance() && drive_ != nullptr;
}
inline bool CreateDriveResponse::has_drive() const {
  return _internal_has_drive();
}
inline const ::grpc_services::storage::Drive& CreateDriveResponse::_internal_drive() const {
  const ::grpc_services::storage::Drive* p = drive_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_services::storage::Drive&>(
      ::grpc_services::storage::_Drive_default_instance_);
}
inline const ::grpc_services::storage::Drive& CreateDriveResponse::drive() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateDriveResponse.drive)
  return _internal_drive();
}
inline void CreateDriveResponse::unsafe_arena_set_allocated_drive(
    ::grpc_services::storage::Drive* drive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drive_);
  }
  drive_ = drive;
  if (drive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_services.storage.CreateDriveResponse.drive)
}
inline ::grpc_services::storage::Drive* CreateDriveResponse::release_drive() {
  
  ::grpc_services::storage::Drive* temp = drive_;
  drive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc_services::storage::Drive* CreateDriveResponse::unsafe_arena_release_drive() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateDriveResponse.drive)
  
  ::grpc_services::storage::Drive* temp = drive_;
  drive_ = nullptr;
  return temp;
}
inline ::grpc_services::storage::Drive* CreateDriveResponse::_internal_mutable_drive() {
  
  if (drive_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_services::storage::Drive>(GetArenaForAllocation());
    drive_ = p;
  }
  return drive_;
}
inline ::grpc_services::storage::Drive* CreateDriveResponse::mutable_drive() {
  ::grpc_services::storage::Drive* _msg = _internal_mutable_drive();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateDriveResponse.drive)
  return _msg;
}
inline void CreateDriveResponse::set_allocated_drive(::grpc_services::storage::Drive* drive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drive_);
  }
  if (drive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drive));
    if (message_arena != submessage_arena) {
      drive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drive, submessage_arena);
    }
    
  } else {
    
  }
  drive_ = drive;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateDriveResponse.drive)
}

// -------------------------------------------------------------------

// CreateItemRequest

// string drive_id = 1;
inline void CreateItemRequest::clear_drive_id() {
  drive_id_.ClearToEmpty();
}
inline const std::string& CreateItemRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateItemRequest.drive_id)
  return _internal_drive_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateItemRequest::set_drive_id(ArgT0&& arg0, ArgT... args) {
 
 drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.CreateItemRequest.drive_id)
}
inline std::string* CreateItemRequest::mutable_drive_id() {
  std::string* _s = _internal_mutable_drive_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateItemRequest.drive_id)
  return _s;
}
inline const std::string& CreateItemRequest::_internal_drive_id() const {
  return drive_id_.Get();
}
inline void CreateItemRequest::_internal_set_drive_id(const std::string& value) {
  
  drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateItemRequest::_internal_mutable_drive_id() {
  
  return drive_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateItemRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateItemRequest.drive_id)
  return drive_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateItemRequest::set_allocated_drive_id(std::string* drive_id) {
  if (drive_id != nullptr) {
    
  } else {
    
  }
  drive_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), drive_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (drive_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    drive_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateItemRequest.drive_id)
}

// string name = 2;
inline void CreateItemRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateItemRequest::name() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateItemRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateItemRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.CreateItemRequest.name)
}
inline std::string* CreateItemRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateItemRequest.name)
  return _s;
}
inline const std::string& CreateItemRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateItemRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateItemRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateItemRequest::release_name() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateItemRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateItemRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateItemRequest.name)
}

// string description = 3;
inline void CreateItemRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& CreateItemRequest::description() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateItemRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateItemRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.CreateItemRequest.description)
}
inline std::string* CreateItemRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateItemRequest.description)
  return _s;
}
inline const std::string& CreateItemRequest::_internal_description() const {
  return description_.Get();
}
inline void CreateItemRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateItemRequest::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateItemRequest::release_description() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateItemRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateItemRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateItemRequest.description)
}

// string parent_id = 4;
inline void CreateItemRequest::clear_parent_id() {
  parent_id_.ClearToEmpty();
}
inline const std::string& CreateItemRequest::parent_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateItemRequest.parent_id)
  return _internal_parent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateItemRequest::set_parent_id(ArgT0&& arg0, ArgT... args) {
 
 parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.CreateItemRequest.parent_id)
}
inline std::string* CreateItemRequest::mutable_parent_id() {
  std::string* _s = _internal_mutable_parent_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateItemRequest.parent_id)
  return _s;
}
inline const std::string& CreateItemRequest::_internal_parent_id() const {
  return parent_id_.Get();
}
inline void CreateItemRequest::_internal_set_parent_id(const std::string& value) {
  
  parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateItemRequest::_internal_mutable_parent_id() {
  
  return parent_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateItemRequest::release_parent_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateItemRequest.parent_id)
  return parent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateItemRequest::set_allocated_parent_id(std::string* parent_id) {
  if (parent_id != nullptr) {
    
  } else {
    
  }
  parent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateItemRequest.parent_id)
}

// .grpc_services.storage.ItemType type = 5;
inline void CreateItemRequest::clear_type() {
  type_ = 0;
}
inline ::grpc_services::storage::ItemType CreateItemRequest::_internal_type() const {
  return static_cast< ::grpc_services::storage::ItemType >(type_);
}
inline ::grpc_services::storage::ItemType CreateItemRequest::type() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateItemRequest.type)
  return _internal_type();
}
inline void CreateItemRequest::_internal_set_type(::grpc_services::storage::ItemType value) {
  
  type_ = value;
}
inline void CreateItemRequest::set_type(::grpc_services::storage::ItemType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.CreateItemRequest.type)
}

// -------------------------------------------------------------------

// CreateItemResponse

// .grpc_services.storage.Item item = 1;
inline bool CreateItemResponse::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool CreateItemResponse::has_item() const {
  return _internal_has_item();
}
inline const ::grpc_services::storage::Item& CreateItemResponse::_internal_item() const {
  const ::grpc_services::storage::Item* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_services::storage::Item&>(
      ::grpc_services::storage::_Item_default_instance_);
}
inline const ::grpc_services::storage::Item& CreateItemResponse::item() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateItemResponse.item)
  return _internal_item();
}
inline void CreateItemResponse::unsafe_arena_set_allocated_item(
    ::grpc_services::storage::Item* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_services.storage.CreateItemResponse.item)
}
inline ::grpc_services::storage::Item* CreateItemResponse::release_item() {
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc_services::storage::Item* CreateItemResponse::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateItemResponse.item)
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::grpc_services::storage::Item* CreateItemResponse::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_services::storage::Item>(GetArenaForAllocation());
    item_ = p;
  }
  return item_;
}
inline ::grpc_services::storage::Item* CreateItemResponse::mutable_item() {
  ::grpc_services::storage::Item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateItemResponse.item)
  return _msg;
}
inline void CreateItemResponse::set_allocated_item(::grpc_services::storage::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateItemResponse.item)
}

// -------------------------------------------------------------------

// PutContentStreamRequest

// string drive_id = 1;
inline void PutContentStreamRequest::clear_drive_id() {
  drive_id_.ClearToEmpty();
}
inline const std::string& PutContentStreamRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.PutContentStreamRequest.drive_id)
  return _internal_drive_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutContentStreamRequest::set_drive_id(ArgT0&& arg0, ArgT... args) {
 
 drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.PutContentStreamRequest.drive_id)
}
inline std::string* PutContentStreamRequest::mutable_drive_id() {
  std::string* _s = _internal_mutable_drive_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.PutContentStreamRequest.drive_id)
  return _s;
}
inline const std::string& PutContentStreamRequest::_internal_drive_id() const {
  return drive_id_.Get();
}
inline void PutContentStreamRequest::_internal_set_drive_id(const std::string& value) {
  
  drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PutContentStreamRequest::_internal_mutable_drive_id() {
  
  return drive_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PutContentStreamRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.PutContentStreamRequest.drive_id)
  return drive_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PutContentStreamRequest::set_allocated_drive_id(std::string* drive_id) {
  if (drive_id != nullptr) {
    
  } else {
    
  }
  drive_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), drive_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (drive_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    drive_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.PutContentStreamRequest.drive_id)
}

// string item_id = 2;
inline void PutContentStreamRequest::clear_item_id() {
  item_id_.ClearToEmpty();
}
inline const std::string& PutContentStreamRequest::item_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.PutContentStreamRequest.item_id)
  return _internal_item_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutContentStreamRequest::set_item_id(ArgT0&& arg0, ArgT... args) {
 
 item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.PutContentStreamRequest.item_id)
}
inline std::string* PutContentStreamRequest::mutable_item_id() {
  std::string* _s = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.PutContentStreamRequest.item_id)
  return _s;
}
inline const std::string& PutContentStreamRequest::_internal_item_id() const {
  return item_id_.Get();
}
inline void PutContentStreamRequest::_internal_set_item_id(const std::string& value) {
  
  item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PutContentStreamRequest::_internal_mutable_item_id() {
  
  return item_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PutContentStreamRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.PutContentStreamRequest.item_id)
  return item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PutContentStreamRequest::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.PutContentStreamRequest.item_id)
}

// uint64 offset = 3;
inline void PutContentStreamRequest::clear_offset() {
  offset_ = uint64_t{0u};
}
inline uint64_t PutContentStreamRequest::_internal_offset() const {
  return offset_;
}
inline uint64_t PutContentStreamRequest::offset() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.PutContentStreamRequest.offset)
  return _internal_offset();
}
inline void PutContentStreamRequest::_internal_set_offset(uint64_t value) {
  
  offset_ = value;
}
inline void PutContentStreamRequest::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.PutContentStreamRequest.offset)
}

// bytes content = 4;
inline void PutContentStreamRequest::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& PutContentStreamRequest::content() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.PutContentStreamRequest.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutContentStreamRequest::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.PutContentStreamRequest.content)
}
inline std::string* PutContentStreamRequest::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.PutContentStreamRequest.content)
  return _s;
}
inline const std::string& PutContentStreamRequest::_internal_content() const {
  return content_.Get();
}
inline void PutContentStreamRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PutContentStreamRequest::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PutContentStreamRequest::release_content() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.PutContentStreamRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PutContentStreamRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.PutContentStreamRequest.content)
}

// -------------------------------------------------------------------

// PutContentStreamResponse

// .grpc_services.storage.Item item = 1;
inline bool PutContentStreamResponse::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool PutContentStreamResponse::has_item() const {
  return _internal_has_item();
}
inline const ::grpc_services::storage::Item& PutContentStreamResponse::_internal_item() const {
  const ::grpc_services::storage::Item* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_services::storage::Item&>(
      ::grpc_services::storage::_Item_default_instance_);
}
inline const ::grpc_services::storage::Item& PutContentStreamResponse::item() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.PutContentStreamResponse.item)
  return _internal_item();
}
inline void PutContentStreamResponse::unsafe_arena_set_allocated_item(
    ::grpc_services::storage::Item* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_services.storage.PutContentStreamResponse.item)
}
inline ::grpc_services::storage::Item* PutContentStreamResponse::release_item() {
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc_services::storage::Item* PutContentStreamResponse::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.PutContentStreamResponse.item)
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::grpc_services::storage::Item* PutContentStreamResponse::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_services::storage::Item>(GetArenaForAllocation());
    item_ = p;
  }
  return item_;
}
inline ::grpc_services::storage::Item* PutContentStreamResponse::mutable_item() {
  ::grpc_services::storage::Item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.PutContentStreamResponse.item)
  return _msg;
}
inline void PutContentStreamResponse::set_allocated_item(::grpc_services::storage::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.PutContentStreamResponse.item)
}

// -------------------------------------------------------------------

// TruncateContentRequest

// string drive_id = 1;
inline void TruncateContentRequest::clear_drive_id() {
  drive_id_.ClearToEmpty();
}
inline const std::string& TruncateContentRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.TruncateContentRequest.drive_id)
  return _internal_drive_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TruncateContentRequest::set_drive_id(ArgT0&& arg0, ArgT... args) {
 
 drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.TruncateContentRequest.drive_id)
}
inline std::string* TruncateContentRequest::mutable_drive_id() {
  std::string* _s = _internal_mutable_drive_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.TruncateContentRequest.drive_id)
  return _s;
}
inline const std::string& TruncateContentRequest::_internal_drive_id() const {
  return drive_id_.Get();
}
inline void TruncateContentRequest::_internal_set_drive_id(const std::string& value) {
  
  drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TruncateContentRequest::_internal_mutable_drive_id() {
  
  return drive_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TruncateContentRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.TruncateContentRequest.drive_id)
  return drive_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TruncateContentRequest::set_allocated_drive_id(std::string* drive_id) {
  if (drive_id != nullptr) {
    
  } else {
    
  }
  drive_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), drive_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (drive_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    drive_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.TruncateContentRequest.drive_id)
}

// string item_id = 2;
inline void TruncateContentRequest::clear_item_id() {
  item_id_.ClearToEmpty();
}
inline const std::string& TruncateContentRequest::item_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.TruncateContentRequest.item_id)
  return _internal_item_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TruncateContentRequest::set_item_id(ArgT0&& arg0, ArgT... args) {
 
 item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.TruncateContentRequest.item_id)
}
inline std::string* TruncateContentRequest::mutable_item_id() {
  std::string* _s = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.TruncateContentRequest.item_id)
  return _s;
}
inline const std::string& TruncateContentRequest::_internal_item_id() const {
  return item_id_.Get();
}
inline void TruncateContentRequest::_internal_set_item_id(const std::string& value) {
  
  item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TruncateContentRequest::_internal_mutable_item_id() {
  
  return item_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TruncateContentRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.TruncateContentRequest.item_id)
  return item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TruncateContentRequest::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.TruncateContentRequest.item_id)
}

// uint64 new_length = 3;
inline void TruncateContentRequest::clear_new_length() {
  new_length_ = uint64_t{0u};
}
inline uint64_t TruncateContentRequest::_internal_new_length() const {
  return new_length_;
}
inline uint64_t TruncateContentRequest::new_length() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.TruncateContentRequest.new_length)
  return _internal_new_length();
}
inline void TruncateContentRequest::_internal_set_new_length(uint64_t value) {
  
  new_length_ = value;
}
inline void TruncateContentRequest::set_new_length(uint64_t value) {
  _internal_set_new_length(value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.TruncateContentRequest.new_length)
}

// -------------------------------------------------------------------

// TruncateContentResponse

// .grpc_services.storage.Item item = 1;
inline bool TruncateContentResponse::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool TruncateContentResponse::has_item() const {
  return _internal_has_item();
}
inline const ::grpc_services::storage::Item& TruncateContentResponse::_internal_item() const {
  const ::grpc_services::storage::Item* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_services::storage::Item&>(
      ::grpc_services::storage::_Item_default_instance_);
}
inline const ::grpc_services::storage::Item& TruncateContentResponse::item() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.TruncateContentResponse.item)
  return _internal_item();
}
inline void TruncateContentResponse::unsafe_arena_set_allocated_item(
    ::grpc_services::storage::Item* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_services.storage.TruncateContentResponse.item)
}
inline ::grpc_services::storage::Item* TruncateContentResponse::release_item() {
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc_services::storage::Item* TruncateContentResponse::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.TruncateContentResponse.item)
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::grpc_services::storage::Item* TruncateContentResponse::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_services::storage::Item>(GetArenaForAllocation());
    item_ = p;
  }
  return item_;
}
inline ::grpc_services::storage::Item* TruncateContentResponse::mutable_item() {
  ::grpc_services::storage::Item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.TruncateContentResponse.item)
  return _msg;
}
inline void TruncateContentResponse::set_allocated_item(::grpc_services::storage::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.TruncateContentResponse.item)
}

// -------------------------------------------------------------------

// UpdateDriveRequest

// .grpc_services.storage.Drive drive = 1;
inline bool UpdateDriveRequest::_internal_has_drive() const {
  return this != internal_default_instance() && drive_ != nullptr;
}
inline bool UpdateDriveRequest::has_drive() const {
  return _internal_has_drive();
}
inline const ::grpc_services::storage::Drive& UpdateDriveRequest::_internal_drive() const {
  const ::grpc_services::storage::Drive* p = drive_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_services::storage::Drive&>(
      ::grpc_services::storage::_Drive_default_instance_);
}
inline const ::grpc_services::storage::Drive& UpdateDriveRequest::drive() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.UpdateDriveRequest.drive)
  return _internal_drive();
}
inline void UpdateDriveRequest::unsafe_arena_set_allocated_drive(
    ::grpc_services::storage::Drive* drive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drive_);
  }
  drive_ = drive;
  if (drive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_services.storage.UpdateDriveRequest.drive)
}
inline ::grpc_services::storage::Drive* UpdateDriveRequest::release_drive() {
  
  ::grpc_services::storage::Drive* temp = drive_;
  drive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc_services::storage::Drive* UpdateDriveRequest::unsafe_arena_release_drive() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.UpdateDriveRequest.drive)
  
  ::grpc_services::storage::Drive* temp = drive_;
  drive_ = nullptr;
  return temp;
}
inline ::grpc_services::storage::Drive* UpdateDriveRequest::_internal_mutable_drive() {
  
  if (drive_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_services::storage::Drive>(GetArenaForAllocation());
    drive_ = p;
  }
  return drive_;
}
inline ::grpc_services::storage::Drive* UpdateDriveRequest::mutable_drive() {
  ::grpc_services::storage::Drive* _msg = _internal_mutable_drive();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.UpdateDriveRequest.drive)
  return _msg;
}
inline void UpdateDriveRequest::set_allocated_drive(::grpc_services::storage::Drive* drive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drive_);
  }
  if (drive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drive));
    if (message_arena != submessage_arena) {
      drive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drive, submessage_arena);
    }
    
  } else {
    
  }
  drive_ = drive;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.UpdateDriveRequest.drive)
}

// -------------------------------------------------------------------

// UpdateDriveResponse

// .grpc_services.storage.Drive drive = 1;
inline bool UpdateDriveResponse::_internal_has_drive() const {
  return this != internal_default_instance() && drive_ != nullptr;
}
inline bool UpdateDriveResponse::has_drive() const {
  return _internal_has_drive();
}
inline const ::grpc_services::storage::Drive& UpdateDriveResponse::_internal_drive() const {
  const ::grpc_services::storage::Drive* p = drive_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_services::storage::Drive&>(
      ::grpc_services::storage::_Drive_default_instance_);
}
inline const ::grpc_services::storage::Drive& UpdateDriveResponse::drive() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.UpdateDriveResponse.drive)
  return _internal_drive();
}
inline void UpdateDriveResponse::unsafe_arena_set_allocated_drive(
    ::grpc_services::storage::Drive* drive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drive_);
  }
  drive_ = drive;
  if (drive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_services.storage.UpdateDriveResponse.drive)
}
inline ::grpc_services::storage::Drive* UpdateDriveResponse::release_drive() {
  
  ::grpc_services::storage::Drive* temp = drive_;
  drive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc_services::storage::Drive* UpdateDriveResponse::unsafe_arena_release_drive() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.UpdateDriveResponse.drive)
  
  ::grpc_services::storage::Drive* temp = drive_;
  drive_ = nullptr;
  return temp;
}
inline ::grpc_services::storage::Drive* UpdateDriveResponse::_internal_mutable_drive() {
  
  if (drive_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_services::storage::Drive>(GetArenaForAllocation());
    drive_ = p;
  }
  return drive_;
}
inline ::grpc_services::storage::Drive* UpdateDriveResponse::mutable_drive() {
  ::grpc_services::storage::Drive* _msg = _internal_mutable_drive();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.UpdateDriveResponse.drive)
  return _msg;
}
inline void UpdateDriveResponse::set_allocated_drive(::grpc_services::storage::Drive* drive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drive_);
  }
  if (drive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drive));
    if (message_arena != submessage_arena) {
      drive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drive, submessage_arena);
    }
    
  } else {
    
  }
  drive_ = drive;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.UpdateDriveResponse.drive)
}

// -------------------------------------------------------------------

// UpdateItemRequest

// string drive = 1;
inline void UpdateItemRequest::clear_drive() {
  drive_.ClearToEmpty();
}
inline const std::string& UpdateItemRequest::drive() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.UpdateItemRequest.drive)
  return _internal_drive();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateItemRequest::set_drive(ArgT0&& arg0, ArgT... args) {
 
 drive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.UpdateItemRequest.drive)
}
inline std::string* UpdateItemRequest::mutable_drive() {
  std::string* _s = _internal_mutable_drive();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.UpdateItemRequest.drive)
  return _s;
}
inline const std::string& UpdateItemRequest::_internal_drive() const {
  return drive_.Get();
}
inline void UpdateItemRequest::_internal_set_drive(const std::string& value) {
  
  drive_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateItemRequest::_internal_mutable_drive() {
  
  return drive_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateItemRequest::release_drive() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.UpdateItemRequest.drive)
  return drive_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateItemRequest::set_allocated_drive(std::string* drive) {
  if (drive != nullptr) {
    
  } else {
    
  }
  drive_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), drive,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (drive_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    drive_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.UpdateItemRequest.drive)
}

// .grpc_services.storage.Item item = 2;
inline bool UpdateItemRequest::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool UpdateItemRequest::has_item() const {
  return _internal_has_item();
}
inline const ::grpc_services::storage::Item& UpdateItemRequest::_internal_item() const {
  const ::grpc_services::storage::Item* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_services::storage::Item&>(
      ::grpc_services::storage::_Item_default_instance_);
}
inline const ::grpc_services::storage::Item& UpdateItemRequest::item() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.UpdateItemRequest.item)
  return _internal_item();
}
inline void UpdateItemRequest::unsafe_arena_set_allocated_item(
    ::grpc_services::storage::Item* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_services.storage.UpdateItemRequest.item)
}
inline ::grpc_services::storage::Item* UpdateItemRequest::release_item() {
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc_services::storage::Item* UpdateItemRequest::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.UpdateItemRequest.item)
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::grpc_services::storage::Item* UpdateItemRequest::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_services::storage::Item>(GetArenaForAllocation());
    item_ = p;
  }
  return item_;
}
inline ::grpc_services::storage::Item* UpdateItemRequest::mutable_item() {
  ::grpc_services::storage::Item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.UpdateItemRequest.item)
  return _msg;
}
inline void UpdateItemRequest::set_allocated_item(::grpc_services::storage::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.UpdateItemRequest.item)
}

// -------------------------------------------------------------------

// UpdateItemResponse

// .grpc_services.storage.Item item = 1;
inline bool UpdateItemResponse::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool UpdateItemResponse::has_item() const {
  return _internal_has_item();
}
inline const ::grpc_services::storage::Item& UpdateItemResponse::_internal_item() const {
  const ::grpc_services::storage::Item* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_services::storage::Item&>(
      ::grpc_services::storage::_Item_default_instance_);
}
inline const ::grpc_services::storage::Item& UpdateItemResponse::item() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.UpdateItemResponse.item)
  return _internal_item();
}
inline void UpdateItemResponse::unsafe_arena_set_allocated_item(
    ::grpc_services::storage::Item* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_services.storage.UpdateItemResponse.item)
}
inline ::grpc_services::storage::Item* UpdateItemResponse::release_item() {
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc_services::storage::Item* UpdateItemResponse::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.UpdateItemResponse.item)
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::grpc_services::storage::Item* UpdateItemResponse::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_services::storage::Item>(GetArenaForAllocation());
    item_ = p;
  }
  return item_;
}
inline ::grpc_services::storage::Item* UpdateItemResponse::mutable_item() {
  ::grpc_services::storage::Item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.UpdateItemResponse.item)
  return _msg;
}
inline void UpdateItemResponse::set_allocated_item(::grpc_services::storage::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.UpdateItemResponse.item)
}

// -------------------------------------------------------------------

// RemoveDriveRequest

// string drive_id = 1;
inline void RemoveDriveRequest::clear_drive_id() {
  drive_id_.ClearToEmpty();
}
inline const std::string& RemoveDriveRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.RemoveDriveRequest.drive_id)
  return _internal_drive_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveDriveRequest::set_drive_id(ArgT0&& arg0, ArgT... args) {
 
 drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.RemoveDriveRequest.drive_id)
}
inline std::string* RemoveDriveRequest::mutable_drive_id() {
  std::string* _s = _internal_mutable_drive_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.RemoveDriveRequest.drive_id)
  return _s;
}
inline const std::string& RemoveDriveRequest::_internal_drive_id() const {
  return drive_id_.Get();
}
inline void RemoveDriveRequest::_internal_set_drive_id(const std::string& value) {
  
  drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RemoveDriveRequest::_internal_mutable_drive_id() {
  
  return drive_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RemoveDriveRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.RemoveDriveRequest.drive_id)
  return drive_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RemoveDriveRequest::set_allocated_drive_id(std::string* drive_id) {
  if (drive_id != nullptr) {
    
  } else {
    
  }
  drive_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), drive_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (drive_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    drive_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.RemoveDriveRequest.drive_id)
}

// -------------------------------------------------------------------

// RemoveDriveResponse

// -------------------------------------------------------------------

// RemoveItemRequest

// string drive_id = 1;
inline void RemoveItemRequest::clear_drive_id() {
  drive_id_.ClearToEmpty();
}
inline const std::string& RemoveItemRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.RemoveItemRequest.drive_id)
  return _internal_drive_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveItemRequest::set_drive_id(ArgT0&& arg0, ArgT... args) {
 
 drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.RemoveItemRequest.drive_id)
}
inline std::string* RemoveItemRequest::mutable_drive_id() {
  std::string* _s = _internal_mutable_drive_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.RemoveItemRequest.drive_id)
  return _s;
}
inline const std::string& RemoveItemRequest::_internal_drive_id() const {
  return drive_id_.Get();
}
inline void RemoveItemRequest::_internal_set_drive_id(const std::string& value) {
  
  drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RemoveItemRequest::_internal_mutable_drive_id() {
  
  return drive_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RemoveItemRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.RemoveItemRequest.drive_id)
  return drive_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RemoveItemRequest::set_allocated_drive_id(std::string* drive_id) {
  if (drive_id != nullptr) {
    
  } else {
    
  }
  drive_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), drive_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (drive_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    drive_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.RemoveItemRequest.drive_id)
}

// string item_id = 2;
inline void RemoveItemRequest::clear_item_id() {
  item_id_.ClearToEmpty();
}
inline const std::string& RemoveItemRequest::item_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.RemoveItemRequest.item_id)
  return _internal_item_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveItemRequest::set_item_id(ArgT0&& arg0, ArgT... args) {
 
 item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.RemoveItemRequest.item_id)
}
inline std::string* RemoveItemRequest::mutable_item_id() {
  std::string* _s = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.RemoveItemRequest.item_id)
  return _s;
}
inline const std::string& RemoveItemRequest::_internal_item_id() const {
  return item_id_.Get();
}
inline void RemoveItemRequest::_internal_set_item_id(const std::string& value) {
  
  item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RemoveItemRequest::_internal_mutable_item_id() {
  
  return item_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RemoveItemRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.RemoveItemRequest.item_id)
  return item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RemoveItemRequest::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.RemoveItemRequest.item_id)
}

// -------------------------------------------------------------------

// RemoveItemResponse

// -------------------------------------------------------------------

// WatchChangesRequest

// string drive_id = 1;
inline void WatchChangesRequest::clear_drive_id() {
  drive_id_.ClearToEmpty();
}
inline const std::string& WatchChangesRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.WatchChangesRequest.drive_id)
  return _internal_drive_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WatchChangesRequest::set_drive_id(ArgT0&& arg0, ArgT... args) {
 
 drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_services.storage.WatchChangesRequest.drive_id)
}
inline std::string* WatchChangesRequest::mutable_drive_id() {
  std::string* _s = _internal_mutable_drive_id();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.WatchChangesRequest.drive_id)
  return _s;
}
inline const std::string& WatchChangesRequest::_internal_drive_id() const {
  return drive_id_.Get();
}
inline void WatchChangesRequest::_internal_set_drive_id(const std::string& value) {
  
  drive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WatchChangesRequest::_internal_mutable_drive_id() {
  
  return drive_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WatchChangesRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.WatchChangesRequest.drive_id)
  return drive_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WatchChangesRequest::set_allocated_drive_id(std::string* drive_id) {
  if (drive_id != nullptr) {
    
  } else {
    
  }
  drive_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), drive_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (drive_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    drive_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.WatchChangesRequest.drive_id)
}

// -------------------------------------------------------------------

// WatchChangesResponse

// .grpc_services.storage.ItemCreatedEvent created = 1;
inline bool WatchChangesResponse::_internal_has_created() const {
  return test_event_case() == kCreated;
}
inline bool WatchChangesResponse::has_created() const {
  return _internal_has_created();
}
inline void WatchChangesResponse::set_has_created() {
  _oneof_case_[0] = kCreated;
}
inline ::grpc_services::storage::ItemCreatedEvent* WatchChangesResponse::release_created() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.WatchChangesResponse.created)
  if (_internal_has_created()) {
    clear_has_test_event();
      ::grpc_services::storage::ItemCreatedEvent* temp = test_event_.created_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    test_event_.created_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc_services::storage::ItemCreatedEvent& WatchChangesResponse::_internal_created() const {
  return _internal_has_created()
      ? *test_event_.created_
      : reinterpret_cast< ::grpc_services::storage::ItemCreatedEvent&>(::grpc_services::storage::_ItemCreatedEvent_default_instance_);
}
inline const ::grpc_services::storage::ItemCreatedEvent& WatchChangesResponse::created() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.WatchChangesResponse.created)
  return _internal_created();
}
inline ::grpc_services::storage::ItemCreatedEvent* WatchChangesResponse::unsafe_arena_release_created() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc_services.storage.WatchChangesResponse.created)
  if (_internal_has_created()) {
    clear_has_test_event();
    ::grpc_services::storage::ItemCreatedEvent* temp = test_event_.created_;
    test_event_.created_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WatchChangesResponse::unsafe_arena_set_allocated_created(::grpc_services::storage::ItemCreatedEvent* created) {
  clear_test_event();
  if (created) {
    set_has_created();
    test_event_.created_ = created;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_services.storage.WatchChangesResponse.created)
}
inline ::grpc_services::storage::ItemCreatedEvent* WatchChangesResponse::_internal_mutable_created() {
  if (!_internal_has_created()) {
    clear_test_event();
    set_has_created();
    test_event_.created_ = CreateMaybeMessage< ::grpc_services::storage::ItemCreatedEvent >(GetArenaForAllocation());
  }
  return test_event_.created_;
}
inline ::grpc_services::storage::ItemCreatedEvent* WatchChangesResponse::mutable_created() {
  ::grpc_services::storage::ItemCreatedEvent* _msg = _internal_mutable_created();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.WatchChangesResponse.created)
  return _msg;
}

// .grpc_services.storage.ItemRemovedEvent removed = 2;
inline bool WatchChangesResponse::_internal_has_removed() const {
  return test_event_case() == kRemoved;
}
inline bool WatchChangesResponse::has_removed() const {
  return _internal_has_removed();
}
inline void WatchChangesResponse::set_has_removed() {
  _oneof_case_[0] = kRemoved;
}
inline ::grpc_services::storage::ItemRemovedEvent* WatchChangesResponse::release_removed() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.WatchChangesResponse.removed)
  if (_internal_has_removed()) {
    clear_has_test_event();
      ::grpc_services::storage::ItemRemovedEvent* temp = test_event_.removed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    test_event_.removed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc_services::storage::ItemRemovedEvent& WatchChangesResponse::_internal_removed() const {
  return _internal_has_removed()
      ? *test_event_.removed_
      : reinterpret_cast< ::grpc_services::storage::ItemRemovedEvent&>(::grpc_services::storage::_ItemRemovedEvent_default_instance_);
}
inline const ::grpc_services::storage::ItemRemovedEvent& WatchChangesResponse::removed() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.WatchChangesResponse.removed)
  return _internal_removed();
}
inline ::grpc_services::storage::ItemRemovedEvent* WatchChangesResponse::unsafe_arena_release_removed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc_services.storage.WatchChangesResponse.removed)
  if (_internal_has_removed()) {
    clear_has_test_event();
    ::grpc_services::storage::ItemRemovedEvent* temp = test_event_.removed_;
    test_event_.removed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WatchChangesResponse::unsafe_arena_set_allocated_removed(::grpc_services::storage::ItemRemovedEvent* removed) {
  clear_test_event();
  if (removed) {
    set_has_removed();
    test_event_.removed_ = removed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_services.storage.WatchChangesResponse.removed)
}
inline ::grpc_services::storage::ItemRemovedEvent* WatchChangesResponse::_internal_mutable_removed() {
  if (!_internal_has_removed()) {
    clear_test_event();
    set_has_removed();
    test_event_.removed_ = CreateMaybeMessage< ::grpc_services::storage::ItemRemovedEvent >(GetArenaForAllocation());
  }
  return test_event_.removed_;
}
inline ::grpc_services::storage::ItemRemovedEvent* WatchChangesResponse::mutable_removed() {
  ::grpc_services::storage::ItemRemovedEvent* _msg = _internal_mutable_removed();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.WatchChangesResponse.removed)
  return _msg;
}

// .grpc_services.storage.ItemContentUpdatedEvent updated = 3;
inline bool WatchChangesResponse::_internal_has_updated() const {
  return test_event_case() == kUpdated;
}
inline bool WatchChangesResponse::has_updated() const {
  return _internal_has_updated();
}
inline void WatchChangesResponse::set_has_updated() {
  _oneof_case_[0] = kUpdated;
}
inline ::grpc_services::storage::ItemContentUpdatedEvent* WatchChangesResponse::release_updated() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.WatchChangesResponse.updated)
  if (_internal_has_updated()) {
    clear_has_test_event();
      ::grpc_services::storage::ItemContentUpdatedEvent* temp = test_event_.updated_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    test_event_.updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc_services::storage::ItemContentUpdatedEvent& WatchChangesResponse::_internal_updated() const {
  return _internal_has_updated()
      ? *test_event_.updated_
      : reinterpret_cast< ::grpc_services::storage::ItemContentUpdatedEvent&>(::grpc_services::storage::_ItemContentUpdatedEvent_default_instance_);
}
inline const ::grpc_services::storage::ItemContentUpdatedEvent& WatchChangesResponse::updated() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.WatchChangesResponse.updated)
  return _internal_updated();
}
inline ::grpc_services::storage::ItemContentUpdatedEvent* WatchChangesResponse::unsafe_arena_release_updated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc_services.storage.WatchChangesResponse.updated)
  if (_internal_has_updated()) {
    clear_has_test_event();
    ::grpc_services::storage::ItemContentUpdatedEvent* temp = test_event_.updated_;
    test_event_.updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WatchChangesResponse::unsafe_arena_set_allocated_updated(::grpc_services::storage::ItemContentUpdatedEvent* updated) {
  clear_test_event();
  if (updated) {
    set_has_updated();
    test_event_.updated_ = updated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_services.storage.WatchChangesResponse.updated)
}
inline ::grpc_services::storage::ItemContentUpdatedEvent* WatchChangesResponse::_internal_mutable_updated() {
  if (!_internal_has_updated()) {
    clear_test_event();
    set_has_updated();
    test_event_.updated_ = CreateMaybeMessage< ::grpc_services::storage::ItemContentUpdatedEvent >(GetArenaForAllocation());
  }
  return test_event_.updated_;
}
inline ::grpc_services::storage::ItemContentUpdatedEvent* WatchChangesResponse::mutable_updated() {
  ::grpc_services::storage::ItemContentUpdatedEvent* _msg = _internal_mutable_updated();
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.WatchChangesResponse.updated)
  return _msg;
}

inline bool WatchChangesResponse::has_test_event() const {
  return test_event_case() != TEST_EVENT_NOT_SET;
}
inline void WatchChangesResponse::clear_has_test_event() {
  _oneof_case_[0] = TEST_EVENT_NOT_SET;
}
inline WatchChangesResponse::TestEventCase WatchChangesResponse::test_event_case() const {
  return WatchChangesResponse::TestEventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace storage
}  // namespace grpc_services

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpc_5fservices_2fstorage_2fstorage_2eproto
